name: Go

on:
  push:
    branches: [ '**' ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.vscode/**'
      - '.github/dependabot.yml'
      - '.env'
      - 'docker-compose.yml'
      - 'docker/**'
  pull_request:
    paths-ignore:
      - '**.md'
    branches: [ main ]
env:
  BINARY: 'server'
  GO_VERSION: '1.20'
  BUILD_PATH: './cmd/server'
  IMAGE_NAME: 'ghstahl/echo-token-exchange'
  BASE_VERSION: '1.0.0'

  
jobs:
  pre_flight:
    runs-on: ubuntu-latest
    
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog : ${{ steps.tag_version.outputs.changelog }}
    steps:
    - name: Establish tags and versions
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [pre_flight]
    steps:
    - name: Echo Tags
      run: |
       echo new_tag: ${{needs.pre_flight.outputs.new_tag}} 
       echo changelog: ${{needs.pre_flight.outputs.changelog}}
       
    - uses: actions/checkout@v3


    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: "^${{ env.GO_VERSION }}"

    - name: go mod vendor
      run: |
        go mod tidy -compat="${{ env.GO_VERSION }}" 
        go mod download
        go mod vendor

    - name: move vendor sub folders
      run: |
        mv ./vendor/github.com/fluffy-bunny/sarulabsdi/genny/ ./genny/sarulabsdi/
        rm -rf ./vendor/

    - name: Install Mockgen
      run: |
        go install github.com/golang/mock/mockgen@latest
    - name: Install genny
      run: |
        go version
        go install github.com/cheekybits/genny@latest
    
    - name: GO GENERATE
      run: |
        go generate -x ./...
        rm -rf ./genny/sarulabsdi/
        go mod tidy -compat="${{ env.GO_VERSION }}" 

    # NOTE: This will NOT trigger another run of CI.yml
    - name: AutoCommit
      uses: stefanzweifel/git-auto-commit-action@v4.13.1
      with:
        commit_message: Apply genny and mockgen changes
       
    - name: Build
      run: |
        go build -mod=mod -v -a -tags netgo -ldflags "-X 'main.version=${{needs.pre_flight.outputs.new_tag}}' -extldflags '-static'" ${{ env.BUILD_PATH }}
    
    - name: Make Upload folder
      run: |
        mkdir -p ./artifacts
        cp -r ./${{ env.BINARY }} ./artifacts/
        cp -r ./cmd/server/static/ ./artifacts/
        cd ./artifacts/
        ls -R

    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          ./artifacts/


    - name: Test
      run: go test -v ./...


  # Create and post docker image
  build-docker-push-image:
    runs-on: ubuntu-latest
    needs: [ pre_flight, build ]

    steps:
      - name: Echo Tags
        run: |
         echo new_tag: ${{needs.pre_flight.outputs.new_tag}} 
         echo changelog: ${{needs.pre_flight.outputs.changelog}}

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: inspect build folder
        run: |
          cd ./artifacts
          ls -R

      # If we ever have more than 1 file, tar before actions/upload-artifact
      - name: Fix Execute Bit
        run: |
          chmod +x ./artifacts/${{ env.BINARY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2


      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Establish Versioning, Tags, and Labels
        id: vtl
        uses: mapped/action-vtl@latest
        with:
          baseVersion: ${{ env.BASE_VERSION }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          dockerImage: ${{ env.IMAGE_NAME }}

      - name: Build and push Base
        id: docker_build
        uses: docker/build-push-action@v3
        env:
          version: ${{ steps.vtl.outputs.ver_semVerNoMeta }}
          date: ${{ steps.vtl.outputs.ver_created }}
          commit: ${{ github.sha }}
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./build/Dockerfile
          push: ${{ steps.vtl.outputs.docker_push }}
          tags: ${{ steps.vtl.outputs.docker_tags }}
          labels: ${{ steps.vtl.outputs.oci_labels }}
          build-args: |
            version
            date
            commit
   
      - name: Image digest docker_build
        run: echo ${{ steps.docker_build.outputs.digest }}
 
