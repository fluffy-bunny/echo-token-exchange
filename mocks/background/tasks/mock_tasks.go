// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/background/tasks (interfaces: ISingletonTask)

// Package tasks is a generated GoMock package.
package tasks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockISingletonTask is a mock of ISingletonTask interface.
type MockISingletonTask struct {
	ctrl     *gomock.Controller
	recorder *MockISingletonTaskMockRecorder
}

// MockISingletonTaskMockRecorder is the mock recorder for MockISingletonTask.
type MockISingletonTaskMockRecorder struct {
	mock *MockISingletonTask
}

// NewMockISingletonTask creates a new mock instance.
func NewMockISingletonTask(ctrl *gomock.Controller) *MockISingletonTask {
	mock := &MockISingletonTask{ctrl: ctrl}
	mock.recorder = &MockISingletonTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISingletonTask) EXPECT() *MockISingletonTaskMockRecorder {
	return m.recorder
}

// EnqueTask mocks base method.
func (m *MockISingletonTask) EnqueTask(arg0 interface{}) (*asynq.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueTask", arg0)
	ret0, _ := ret[0].(*asynq.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueTask indicates an expected call of EnqueTask.
func (mr *MockISingletonTaskMockRecorder) EnqueTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueTask", reflect.TypeOf((*MockISingletonTask)(nil).EnqueTask), arg0)
}

// ProcessTask mocks base method.
func (m *MockISingletonTask) ProcessTask(arg0 context.Context, arg1 *asynq.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTask indicates an expected call of ProcessTask.
func (mr *MockISingletonTaskMockRecorder) ProcessTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTask", reflect.TypeOf((*MockISingletonTask)(nil).ProcessTask), arg0, arg1)
}
