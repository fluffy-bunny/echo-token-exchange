// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package clients

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIClientStore used when your service claims to implement IClientStore
var ReflectTypeIClientStore = di.GetInterfaceReflectType((*IClientStore)(nil))

// AddSingletonIClientStore adds a type that implements IClientStore
func AddSingletonIClientStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientStoreWithMetadata adds a type that implements IClientStore
func AddSingletonIClientStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientStoreByObj adds a prebuilt obj
func AddSingletonIClientStoreByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientStoreByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientStoreByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientStoreByFunc adds a type by a custom func
func AddSingletonIClientStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientStoreByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SINGLETON", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientStore adds a type that implements IClientStore
func AddTransientIClientStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("TRANSIENT", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientStoreWithMetadata adds a type that implements IClientStore
func AddTransientIClientStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("TRANSIENT", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientStoreByFunc adds a type by a custom func
func AddTransientIClientStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("TRANSIENT", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientStoreByFuncWithMetadata adds a type by a custom func
func AddTransientIClientStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("TRANSIENT", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientStore adds a type that implements IClientStore
func AddScopedIClientStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SCOPED", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientStoreWithMetadata adds a type that implements IClientStore
func AddScopedIClientStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SCOPED", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientStoreByFunc adds a type by a custom func
func AddScopedIClientStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SCOPED", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientStoreByFuncWithMetadata adds a type by a custom func
func AddScopedIClientStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientStore)
	_logAddIClientStore("SCOPED", implType, _getImplementedIClientStoreNames(implementedTypes...),
		_logIClientStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientStore removes all IClientStore from the DI
func RemoveAllIClientStore(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientStore)
}

// GetIClientStoreFromContainer alternative to SafeGetIClientStoreFromContainer but panics of object is not present
func GetIClientStoreFromContainer(ctn di.Container) IClientStore {
	return ctn.GetByType(ReflectTypeIClientStore).(IClientStore)
}

// GetManyIClientStoreFromContainer alternative to SafeGetManyIClientStoreFromContainer but panics of object is not present
func GetManyIClientStoreFromContainer(ctn di.Container) []IClientStore {
	objs := ctn.GetManyByType(ReflectTypeIClientStore)
	var results []IClientStore
	for _, obj := range objs {
		results = append(results, obj.(IClientStore))
	}
	return results
}

// SafeGetIClientStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientStoreFromContainer(ctn di.Container) (IClientStore, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientStore)
	if err != nil {
		return nil, err
	}
	return obj.(IClientStore), nil
}

// GetIClientStoreDefinition returns that last definition registered that this container can provide
func GetIClientStoreDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientStore)
	return def
}

// GetIClientStoreDefinitions returns all definitions that this container can provide
func GetIClientStoreDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientStore)
	return defs
}

// SafeGetManyIClientStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientStoreFromContainer(ctn di.Container) ([]IClientStore, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientStore)
	if err != nil {
		return nil, err
	}
	var results []IClientStore
	for _, obj := range objs {
		results = append(results, obj.(IClientStore))
	}
	return results, nil
}

type _logIClientStoreExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientStore(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientStoreExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientStoreNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIClientTokenRequest used when your service claims to implement IClientTokenRequest
var ReflectTypeIClientTokenRequest = di.GetInterfaceReflectType((*IClientTokenRequest)(nil))

// AddSingletonIClientTokenRequest adds a type that implements IClientTokenRequest
func AddSingletonIClientTokenRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientTokenRequestWithMetadata adds a type that implements IClientTokenRequest
func AddSingletonIClientTokenRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientTokenRequestByObj adds a prebuilt obj
func AddSingletonIClientTokenRequestByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientTokenRequestByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientTokenRequestByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientTokenRequestByFunc adds a type by a custom func
func AddSingletonIClientTokenRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientTokenRequestByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientTokenRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SINGLETON", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientTokenRequest adds a type that implements IClientTokenRequest
func AddTransientIClientTokenRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("TRANSIENT", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientTokenRequestWithMetadata adds a type that implements IClientTokenRequest
func AddTransientIClientTokenRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("TRANSIENT", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientTokenRequestByFunc adds a type by a custom func
func AddTransientIClientTokenRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("TRANSIENT", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientTokenRequestByFuncWithMetadata adds a type by a custom func
func AddTransientIClientTokenRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("TRANSIENT", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientTokenRequest adds a type that implements IClientTokenRequest
func AddScopedIClientTokenRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SCOPED", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientTokenRequestWithMetadata adds a type that implements IClientTokenRequest
func AddScopedIClientTokenRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SCOPED", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientTokenRequestByFunc adds a type by a custom func
func AddScopedIClientTokenRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SCOPED", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientTokenRequestByFuncWithMetadata adds a type by a custom func
func AddScopedIClientTokenRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequest)
	_logAddIClientTokenRequest("SCOPED", implType, _getImplementedIClientTokenRequestNames(implementedTypes...),
		_logIClientTokenRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientTokenRequest removes all IClientTokenRequest from the DI
func RemoveAllIClientTokenRequest(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientTokenRequest)
}

// GetIClientTokenRequestFromContainer alternative to SafeGetIClientTokenRequestFromContainer but panics of object is not present
func GetIClientTokenRequestFromContainer(ctn di.Container) IClientTokenRequest {
	return ctn.GetByType(ReflectTypeIClientTokenRequest).(IClientTokenRequest)
}

// GetManyIClientTokenRequestFromContainer alternative to SafeGetManyIClientTokenRequestFromContainer but panics of object is not present
func GetManyIClientTokenRequestFromContainer(ctn di.Container) []IClientTokenRequest {
	objs := ctn.GetManyByType(ReflectTypeIClientTokenRequest)
	var results []IClientTokenRequest
	for _, obj := range objs {
		results = append(results, obj.(IClientTokenRequest))
	}
	return results
}

// SafeGetIClientTokenRequestFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientTokenRequestFromContainer(ctn di.Container) (IClientTokenRequest, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientTokenRequest)
	if err != nil {
		return nil, err
	}
	return obj.(IClientTokenRequest), nil
}

// GetIClientTokenRequestDefinition returns that last definition registered that this container can provide
func GetIClientTokenRequestDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientTokenRequest)
	return def
}

// GetIClientTokenRequestDefinitions returns all definitions that this container can provide
func GetIClientTokenRequestDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientTokenRequest)
	return defs
}

// SafeGetManyIClientTokenRequestFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientTokenRequestFromContainer(ctn di.Container) ([]IClientTokenRequest, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientTokenRequest)
	if err != nil {
		return nil, err
	}
	var results []IClientTokenRequest
	for _, obj := range objs {
		results = append(results, obj.(IClientTokenRequest))
	}
	return results, nil
}

type _logIClientTokenRequestExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientTokenRequest(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientTokenRequestExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientTokenRequestNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIClientRequest used when your service claims to implement IClientRequest
var ReflectTypeIClientRequest = di.GetInterfaceReflectType((*IClientRequest)(nil))

// AddSingletonIClientRequest adds a type that implements IClientRequest
func AddSingletonIClientRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientRequestWithMetadata adds a type that implements IClientRequest
func AddSingletonIClientRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientRequestByObj adds a prebuilt obj
func AddSingletonIClientRequestByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientRequestByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientRequestByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientRequestByFunc adds a type by a custom func
func AddSingletonIClientRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientRequestByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SINGLETON", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientRequest adds a type that implements IClientRequest
func AddTransientIClientRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("TRANSIENT", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientRequestWithMetadata adds a type that implements IClientRequest
func AddTransientIClientRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("TRANSIENT", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientRequestByFunc adds a type by a custom func
func AddTransientIClientRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("TRANSIENT", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientRequestByFuncWithMetadata adds a type by a custom func
func AddTransientIClientRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("TRANSIENT", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientRequest adds a type that implements IClientRequest
func AddScopedIClientRequest(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SCOPED", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientRequestWithMetadata adds a type that implements IClientRequest
func AddScopedIClientRequestWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SCOPED", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientRequestByFunc adds a type by a custom func
func AddScopedIClientRequestByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SCOPED", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientRequestByFuncWithMetadata adds a type by a custom func
func AddScopedIClientRequestByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequest)
	_logAddIClientRequest("SCOPED", implType, _getImplementedIClientRequestNames(implementedTypes...),
		_logIClientRequestExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientRequest removes all IClientRequest from the DI
func RemoveAllIClientRequest(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientRequest)
}

// GetIClientRequestFromContainer alternative to SafeGetIClientRequestFromContainer but panics of object is not present
func GetIClientRequestFromContainer(ctn di.Container) IClientRequest {
	return ctn.GetByType(ReflectTypeIClientRequest).(IClientRequest)
}

// GetManyIClientRequestFromContainer alternative to SafeGetManyIClientRequestFromContainer but panics of object is not present
func GetManyIClientRequestFromContainer(ctn di.Container) []IClientRequest {
	objs := ctn.GetManyByType(ReflectTypeIClientRequest)
	var results []IClientRequest
	for _, obj := range objs {
		results = append(results, obj.(IClientRequest))
	}
	return results
}

// SafeGetIClientRequestFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientRequestFromContainer(ctn di.Container) (IClientRequest, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientRequest)
	if err != nil {
		return nil, err
	}
	return obj.(IClientRequest), nil
}

// GetIClientRequestDefinition returns that last definition registered that this container can provide
func GetIClientRequestDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientRequest)
	return def
}

// GetIClientRequestDefinitions returns all definitions that this container can provide
func GetIClientRequestDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientRequest)
	return defs
}

// SafeGetManyIClientRequestFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientRequestFromContainer(ctn di.Container) ([]IClientRequest, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientRequest)
	if err != nil {
		return nil, err
	}
	var results []IClientRequest
	for _, obj := range objs {
		results = append(results, obj.(IClientRequest))
	}
	return results, nil
}

type _logIClientRequestExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientRequest(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientRequestExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientRequestNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIClientRequestInternal used when your service claims to implement IClientRequestInternal
var ReflectTypeIClientRequestInternal = di.GetInterfaceReflectType((*IClientRequestInternal)(nil))

// AddSingletonIClientRequestInternal adds a type that implements IClientRequestInternal
func AddSingletonIClientRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientRequestInternalWithMetadata adds a type that implements IClientRequestInternal
func AddSingletonIClientRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientRequestInternalByObj adds a prebuilt obj
func AddSingletonIClientRequestInternalByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientRequestInternalByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientRequestInternalByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientRequestInternalByFunc adds a type by a custom func
func AddSingletonIClientRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientRequestInternalByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SINGLETON", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientRequestInternal adds a type that implements IClientRequestInternal
func AddTransientIClientRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("TRANSIENT", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientRequestInternalWithMetadata adds a type that implements IClientRequestInternal
func AddTransientIClientRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("TRANSIENT", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientRequestInternalByFunc adds a type by a custom func
func AddTransientIClientRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("TRANSIENT", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientRequestInternalByFuncWithMetadata adds a type by a custom func
func AddTransientIClientRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("TRANSIENT", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientRequestInternal adds a type that implements IClientRequestInternal
func AddScopedIClientRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SCOPED", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientRequestInternalWithMetadata adds a type that implements IClientRequestInternal
func AddScopedIClientRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SCOPED", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientRequestInternalByFunc adds a type by a custom func
func AddScopedIClientRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SCOPED", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientRequestInternalByFuncWithMetadata adds a type by a custom func
func AddScopedIClientRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientRequestInternal)
	_logAddIClientRequestInternal("SCOPED", implType, _getImplementedIClientRequestInternalNames(implementedTypes...),
		_logIClientRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientRequestInternal removes all IClientRequestInternal from the DI
func RemoveAllIClientRequestInternal(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientRequestInternal)
}

// GetIClientRequestInternalFromContainer alternative to SafeGetIClientRequestInternalFromContainer but panics of object is not present
func GetIClientRequestInternalFromContainer(ctn di.Container) IClientRequestInternal {
	return ctn.GetByType(ReflectTypeIClientRequestInternal).(IClientRequestInternal)
}

// GetManyIClientRequestInternalFromContainer alternative to SafeGetManyIClientRequestInternalFromContainer but panics of object is not present
func GetManyIClientRequestInternalFromContainer(ctn di.Container) []IClientRequestInternal {
	objs := ctn.GetManyByType(ReflectTypeIClientRequestInternal)
	var results []IClientRequestInternal
	for _, obj := range objs {
		results = append(results, obj.(IClientRequestInternal))
	}
	return results
}

// SafeGetIClientRequestInternalFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientRequestInternalFromContainer(ctn di.Container) (IClientRequestInternal, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientRequestInternal)
	if err != nil {
		return nil, err
	}
	return obj.(IClientRequestInternal), nil
}

// GetIClientRequestInternalDefinition returns that last definition registered that this container can provide
func GetIClientRequestInternalDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientRequestInternal)
	return def
}

// GetIClientRequestInternalDefinitions returns all definitions that this container can provide
func GetIClientRequestInternalDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientRequestInternal)
	return defs
}

// SafeGetManyIClientRequestInternalFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientRequestInternalFromContainer(ctn di.Container) ([]IClientRequestInternal, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientRequestInternal)
	if err != nil {
		return nil, err
	}
	var results []IClientRequestInternal
	for _, obj := range objs {
		results = append(results, obj.(IClientRequestInternal))
	}
	return results, nil
}

type _logIClientRequestInternalExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientRequestInternal(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientRequestInternalExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientRequestInternalNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIClientTokenRequestInternal used when your service claims to implement IClientTokenRequestInternal
var ReflectTypeIClientTokenRequestInternal = di.GetInterfaceReflectType((*IClientTokenRequestInternal)(nil))

// AddSingletonIClientTokenRequestInternal adds a type that implements IClientTokenRequestInternal
func AddSingletonIClientTokenRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientTokenRequestInternalWithMetadata adds a type that implements IClientTokenRequestInternal
func AddSingletonIClientTokenRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientTokenRequestInternalByObj adds a prebuilt obj
func AddSingletonIClientTokenRequestInternalByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientTokenRequestInternalByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientTokenRequestInternalByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientTokenRequestInternalByFunc adds a type by a custom func
func AddSingletonIClientTokenRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientTokenRequestInternalByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientTokenRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SINGLETON", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientTokenRequestInternal adds a type that implements IClientTokenRequestInternal
func AddTransientIClientTokenRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("TRANSIENT", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientTokenRequestInternalWithMetadata adds a type that implements IClientTokenRequestInternal
func AddTransientIClientTokenRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("TRANSIENT", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientTokenRequestInternalByFunc adds a type by a custom func
func AddTransientIClientTokenRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("TRANSIENT", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientTokenRequestInternalByFuncWithMetadata adds a type by a custom func
func AddTransientIClientTokenRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("TRANSIENT", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientTokenRequestInternal adds a type that implements IClientTokenRequestInternal
func AddScopedIClientTokenRequestInternal(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SCOPED", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientTokenRequestInternalWithMetadata adds a type that implements IClientTokenRequestInternal
func AddScopedIClientTokenRequestInternalWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SCOPED", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientTokenRequestInternalByFunc adds a type by a custom func
func AddScopedIClientTokenRequestInternalByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SCOPED", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientTokenRequestInternalByFuncWithMetadata adds a type by a custom func
func AddScopedIClientTokenRequestInternalByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientTokenRequestInternal)
	_logAddIClientTokenRequestInternal("SCOPED", implType, _getImplementedIClientTokenRequestInternalNames(implementedTypes...),
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientTokenRequestInternalExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientTokenRequestInternal removes all IClientTokenRequestInternal from the DI
func RemoveAllIClientTokenRequestInternal(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientTokenRequestInternal)
}

// GetIClientTokenRequestInternalFromContainer alternative to SafeGetIClientTokenRequestInternalFromContainer but panics of object is not present
func GetIClientTokenRequestInternalFromContainer(ctn di.Container) IClientTokenRequestInternal {
	return ctn.GetByType(ReflectTypeIClientTokenRequestInternal).(IClientTokenRequestInternal)
}

// GetManyIClientTokenRequestInternalFromContainer alternative to SafeGetManyIClientTokenRequestInternalFromContainer but panics of object is not present
func GetManyIClientTokenRequestInternalFromContainer(ctn di.Container) []IClientTokenRequestInternal {
	objs := ctn.GetManyByType(ReflectTypeIClientTokenRequestInternal)
	var results []IClientTokenRequestInternal
	for _, obj := range objs {
		results = append(results, obj.(IClientTokenRequestInternal))
	}
	return results
}

// SafeGetIClientTokenRequestInternalFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientTokenRequestInternalFromContainer(ctn di.Container) (IClientTokenRequestInternal, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientTokenRequestInternal)
	if err != nil {
		return nil, err
	}
	return obj.(IClientTokenRequestInternal), nil
}

// GetIClientTokenRequestInternalDefinition returns that last definition registered that this container can provide
func GetIClientTokenRequestInternalDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientTokenRequestInternal)
	return def
}

// GetIClientTokenRequestInternalDefinitions returns all definitions that this container can provide
func GetIClientTokenRequestInternalDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientTokenRequestInternal)
	return defs
}

// SafeGetManyIClientTokenRequestInternalFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientTokenRequestInternalFromContainer(ctn di.Container) ([]IClientTokenRequestInternal, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientTokenRequestInternal)
	if err != nil {
		return nil, err
	}
	var results []IClientTokenRequestInternal
	for _, obj := range objs {
		results = append(results, obj.(IClientTokenRequestInternal))
	}
	return results, nil
}

type _logIClientTokenRequestInternalExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientTokenRequestInternal(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientTokenRequestInternalExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientTokenRequestInternalNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
