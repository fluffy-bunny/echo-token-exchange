// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package jwtvalidator

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIJWTValidator used when your service claims to implement IJWTValidator
var ReflectTypeIJWTValidator = di.GetInterfaceReflectType((*IJWTValidator)(nil))

// AddSingletonIJWTValidator adds a type that implements IJWTValidator
func AddSingletonIJWTValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIJWTValidatorWithMetadata adds a type that implements IJWTValidator
func AddSingletonIJWTValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIJWTValidatorByObj adds a prebuilt obj
func AddSingletonIJWTValidatorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", reflect.TypeOf(obj), _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIJWTValidatorByObjWithMetadata adds a prebuilt obj
func AddSingletonIJWTValidatorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", reflect.TypeOf(obj), _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIJWTValidatorByFunc adds a type by a custom func
func AddSingletonIJWTValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIJWTValidatorByFuncWithMetadata adds a type by a custom func
func AddSingletonIJWTValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SINGLETON", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIJWTValidator adds a type that implements IJWTValidator
func AddTransientIJWTValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("TRANSIENT", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIJWTValidatorWithMetadata adds a type that implements IJWTValidator
func AddTransientIJWTValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("TRANSIENT", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIJWTValidatorByFunc adds a type by a custom func
func AddTransientIJWTValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("TRANSIENT", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIJWTValidatorByFuncWithMetadata adds a type by a custom func
func AddTransientIJWTValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("TRANSIENT", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIJWTValidator adds a type that implements IJWTValidator
func AddScopedIJWTValidator(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SCOPED", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIJWTValidatorWithMetadata adds a type that implements IJWTValidator
func AddScopedIJWTValidatorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SCOPED", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIJWTValidatorByFunc adds a type by a custom func
func AddScopedIJWTValidatorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SCOPED", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIJWTValidatorByFuncWithMetadata adds a type by a custom func
func AddScopedIJWTValidatorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIJWTValidator)
	_logAddIJWTValidator("SCOPED", implType, _getImplementedIJWTValidatorNames(implementedTypes...),
		_logIJWTValidatorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIJWTValidatorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIJWTValidator removes all IJWTValidator from the DI
func RemoveAllIJWTValidator(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIJWTValidator)
}

// GetIJWTValidatorFromContainer alternative to SafeGetIJWTValidatorFromContainer but panics of object is not present
func GetIJWTValidatorFromContainer(ctn di.Container) IJWTValidator {
	return ctn.GetByType(ReflectTypeIJWTValidator).(IJWTValidator)
}

// GetManyIJWTValidatorFromContainer alternative to SafeGetManyIJWTValidatorFromContainer but panics of object is not present
func GetManyIJWTValidatorFromContainer(ctn di.Container) []IJWTValidator {
	objs := ctn.GetManyByType(ReflectTypeIJWTValidator)
	var results []IJWTValidator
	for _, obj := range objs {
		results = append(results, obj.(IJWTValidator))
	}
	return results
}

// SafeGetIJWTValidatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIJWTValidatorFromContainer(ctn di.Container) (IJWTValidator, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIJWTValidator)
	if err != nil {
		return nil, err
	}
	return obj.(IJWTValidator), nil
}

// GetIJWTValidatorDefinition returns that last definition registered that this container can provide
func GetIJWTValidatorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIJWTValidator)
	return def
}

// GetIJWTValidatorDefinitions returns all definitions that this container can provide
func GetIJWTValidatorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIJWTValidator)
	return defs
}

// SafeGetManyIJWTValidatorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIJWTValidatorFromContainer(ctn di.Container) ([]IJWTValidator, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIJWTValidator)
	if err != nil {
		return nil, err
	}
	var results []IJWTValidator
	for _, obj := range objs {
		results = append(results, obj.(IJWTValidator))
	}
	return results, nil
}

type _logIJWTValidatorExtra struct {
	Name  string
	Value interface{}
}

func _logAddIJWTValidator(scopeType string, implType reflect.Type, interfaces string, extra ..._logIJWTValidatorExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIJWTValidatorNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
