// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package tasks

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeISingletonTask used when your service claims to implement ISingletonTask
var ReflectTypeISingletonTask = di.GetInterfaceReflectType((*ISingletonTask)(nil))

// AddSingletonISingletonTask adds a type that implements ISingletonTask
func AddSingletonISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddSingletonISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISingletonTaskByObj adds a prebuilt obj
func AddSingletonISingletonTaskByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISingletonTaskByObjWithMetadata adds a prebuilt obj
func AddSingletonISingletonTaskByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISingletonTaskByFunc adds a type by a custom func
func AddSingletonISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddSingletonISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SINGLETON", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISingletonTask adds a type that implements ISingletonTask
func AddTransientISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddTransientISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISingletonTaskByFunc adds a type by a custom func
func AddTransientISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddTransientISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("TRANSIENT", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISingletonTask adds a type that implements ISingletonTask
func AddScopedISingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISingletonTaskWithMetadata adds a type that implements ISingletonTask
func AddScopedISingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISingletonTaskByFunc adds a type by a custom func
func AddScopedISingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISingletonTaskByFuncWithMetadata adds a type by a custom func
func AddScopedISingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISingletonTask)
	_logAddISingletonTask("SCOPED", implType, _getImplementedISingletonTaskNames(implementedTypes...),
		_logISingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISingletonTask removes all ISingletonTask from the DI
func RemoveAllISingletonTask(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISingletonTask)
}

// GetISingletonTaskFromContainer alternative to SafeGetISingletonTaskFromContainer but panics of object is not present
func GetISingletonTaskFromContainer(ctn di.Container) ISingletonTask {
	return ctn.GetByType(ReflectTypeISingletonTask).(ISingletonTask)
}

// GetManyISingletonTaskFromContainer alternative to SafeGetManyISingletonTaskFromContainer but panics of object is not present
func GetManyISingletonTaskFromContainer(ctn di.Container) []ISingletonTask {
	objs := ctn.GetManyByType(ReflectTypeISingletonTask)
	var results []ISingletonTask
	for _, obj := range objs {
		results = append(results, obj.(ISingletonTask))
	}
	return results
}

// SafeGetISingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISingletonTaskFromContainer(ctn di.Container) (ISingletonTask, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISingletonTask)
	if err != nil {
		return nil, err
	}
	return obj.(ISingletonTask), nil
}

// GetISingletonTaskDefinition returns that last definition registered that this container can provide
func GetISingletonTaskDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeISingletonTask)
	return def
}

// GetISingletonTaskDefinitions returns all definitions that this container can provide
func GetISingletonTaskDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeISingletonTask)
	return defs
}

// SafeGetManyISingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISingletonTaskFromContainer(ctn di.Container) ([]ISingletonTask, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISingletonTask)
	if err != nil {
		return nil, err
	}
	var results []ISingletonTask
	for _, obj := range objs {
		results = append(results, obj.(ISingletonTask))
	}
	return results, nil
}

type _logISingletonTaskExtra struct {
	Name  string
	Value interface{}
}

func _logAddISingletonTask(scopeType string, implType reflect.Type, interfaces string, extra ..._logISingletonTaskExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedISingletonTaskNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
