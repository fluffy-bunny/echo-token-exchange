// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package removetokens

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIRemoveTokensSingletonTask used when your service claims to implement IRemoveTokensSingletonTask
var ReflectTypeIRemoveTokensSingletonTask = di.GetInterfaceReflectType((*IRemoveTokensSingletonTask)(nil))

// AddSingletonIRemoveTokensSingletonTask adds a type that implements IRemoveTokensSingletonTask
func AddSingletonIRemoveTokensSingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIRemoveTokensSingletonTaskWithMetadata adds a type that implements IRemoveTokensSingletonTask
func AddSingletonIRemoveTokensSingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIRemoveTokensSingletonTaskByObj adds a prebuilt obj
func AddSingletonIRemoveTokensSingletonTaskByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIRemoveTokensSingletonTaskByObjWithMetadata adds a prebuilt obj
func AddSingletonIRemoveTokensSingletonTaskByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", reflect.TypeOf(obj), _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIRemoveTokensSingletonTaskByFunc adds a type by a custom func
func AddSingletonIRemoveTokensSingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIRemoveTokensSingletonTaskByFuncWithMetadata adds a type by a custom func
func AddSingletonIRemoveTokensSingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SINGLETON", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIRemoveTokensSingletonTask adds a type that implements IRemoveTokensSingletonTask
func AddTransientIRemoveTokensSingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("TRANSIENT", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIRemoveTokensSingletonTaskWithMetadata adds a type that implements IRemoveTokensSingletonTask
func AddTransientIRemoveTokensSingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("TRANSIENT", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIRemoveTokensSingletonTaskByFunc adds a type by a custom func
func AddTransientIRemoveTokensSingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("TRANSIENT", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIRemoveTokensSingletonTaskByFuncWithMetadata adds a type by a custom func
func AddTransientIRemoveTokensSingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("TRANSIENT", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIRemoveTokensSingletonTask adds a type that implements IRemoveTokensSingletonTask
func AddScopedIRemoveTokensSingletonTask(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SCOPED", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIRemoveTokensSingletonTaskWithMetadata adds a type that implements IRemoveTokensSingletonTask
func AddScopedIRemoveTokensSingletonTaskWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SCOPED", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIRemoveTokensSingletonTaskByFunc adds a type by a custom func
func AddScopedIRemoveTokensSingletonTaskByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SCOPED", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIRemoveTokensSingletonTaskByFuncWithMetadata adds a type by a custom func
func AddScopedIRemoveTokensSingletonTaskByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRemoveTokensSingletonTask)
	_logAddIRemoveTokensSingletonTask("SCOPED", implType, _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes...),
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRemoveTokensSingletonTaskExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIRemoveTokensSingletonTask removes all IRemoveTokensSingletonTask from the DI
func RemoveAllIRemoveTokensSingletonTask(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIRemoveTokensSingletonTask)
}

// GetIRemoveTokensSingletonTaskFromContainer alternative to SafeGetIRemoveTokensSingletonTaskFromContainer but panics of object is not present
func GetIRemoveTokensSingletonTaskFromContainer(ctn di.Container) IRemoveTokensSingletonTask {
	return ctn.GetByType(ReflectTypeIRemoveTokensSingletonTask).(IRemoveTokensSingletonTask)
}

// GetManyIRemoveTokensSingletonTaskFromContainer alternative to SafeGetManyIRemoveTokensSingletonTaskFromContainer but panics of object is not present
func GetManyIRemoveTokensSingletonTaskFromContainer(ctn di.Container) []IRemoveTokensSingletonTask {
	objs := ctn.GetManyByType(ReflectTypeIRemoveTokensSingletonTask)
	var results []IRemoveTokensSingletonTask
	for _, obj := range objs {
		results = append(results, obj.(IRemoveTokensSingletonTask))
	}
	return results
}

// SafeGetIRemoveTokensSingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIRemoveTokensSingletonTaskFromContainer(ctn di.Container) (IRemoveTokensSingletonTask, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIRemoveTokensSingletonTask)
	if err != nil {
		return nil, err
	}
	return obj.(IRemoveTokensSingletonTask), nil
}

// GetIRemoveTokensSingletonTaskDefinition returns that last definition registered that this container can provide
func GetIRemoveTokensSingletonTaskDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIRemoveTokensSingletonTask)
	return def
}

// GetIRemoveTokensSingletonTaskDefinitions returns all definitions that this container can provide
func GetIRemoveTokensSingletonTaskDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIRemoveTokensSingletonTask)
	return defs
}

// SafeGetManyIRemoveTokensSingletonTaskFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIRemoveTokensSingletonTaskFromContainer(ctn di.Container) ([]IRemoveTokensSingletonTask, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIRemoveTokensSingletonTask)
	if err != nil {
		return nil, err
	}
	var results []IRemoveTokensSingletonTask
	for _, obj := range objs {
		results = append(results, obj.(IRemoveTokensSingletonTask))
	}
	return results, nil
}

type _logIRemoveTokensSingletonTaskExtra struct {
	Name  string
	Value interface{}
}

func _logAddIRemoveTokensSingletonTask(scopeType string, implType reflect.Type, interfaces string, extra ..._logIRemoveTokensSingletonTaskExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIRemoveTokensSingletonTaskNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
