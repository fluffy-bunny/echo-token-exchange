// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package oauth2

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeISigningKeyStore used when your service claims to implement ISigningKeyStore
var ReflectTypeISigningKeyStore = di.GetInterfaceReflectType((*ISigningKeyStore)(nil))

// AddSingletonISigningKeyStore adds a type that implements ISigningKeyStore
func AddSingletonISigningKeyStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonISigningKeyStoreWithMetadata adds a type that implements ISigningKeyStore
func AddSingletonISigningKeyStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonISigningKeyStoreByObj adds a prebuilt obj
func AddSingletonISigningKeyStoreByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", reflect.TypeOf(obj), _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonISigningKeyStoreByObjWithMetadata adds a prebuilt obj
func AddSingletonISigningKeyStoreByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", reflect.TypeOf(obj), _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonISigningKeyStoreByFunc adds a type by a custom func
func AddSingletonISigningKeyStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonISigningKeyStoreByFuncWithMetadata adds a type by a custom func
func AddSingletonISigningKeyStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SINGLETON", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientISigningKeyStore adds a type that implements ISigningKeyStore
func AddTransientISigningKeyStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("TRANSIENT", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientISigningKeyStoreWithMetadata adds a type that implements ISigningKeyStore
func AddTransientISigningKeyStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("TRANSIENT", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientISigningKeyStoreByFunc adds a type by a custom func
func AddTransientISigningKeyStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("TRANSIENT", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientISigningKeyStoreByFuncWithMetadata adds a type by a custom func
func AddTransientISigningKeyStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("TRANSIENT", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedISigningKeyStore adds a type that implements ISigningKeyStore
func AddScopedISigningKeyStore(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SCOPED", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedISigningKeyStoreWithMetadata adds a type that implements ISigningKeyStore
func AddScopedISigningKeyStoreWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SCOPED", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedISigningKeyStoreByFunc adds a type by a custom func
func AddScopedISigningKeyStoreByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SCOPED", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedISigningKeyStoreByFuncWithMetadata adds a type by a custom func
func AddScopedISigningKeyStoreByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeISigningKeyStore)
	_logAddISigningKeyStore("SCOPED", implType, _getImplementedISigningKeyStoreNames(implementedTypes...),
		_logISigningKeyStoreExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logISigningKeyStoreExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllISigningKeyStore removes all ISigningKeyStore from the DI
func RemoveAllISigningKeyStore(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeISigningKeyStore)
}

// GetISigningKeyStoreFromContainer alternative to SafeGetISigningKeyStoreFromContainer but panics of object is not present
func GetISigningKeyStoreFromContainer(ctn di.Container) ISigningKeyStore {
	return ctn.GetByType(ReflectTypeISigningKeyStore).(ISigningKeyStore)
}

// GetManyISigningKeyStoreFromContainer alternative to SafeGetManyISigningKeyStoreFromContainer but panics of object is not present
func GetManyISigningKeyStoreFromContainer(ctn di.Container) []ISigningKeyStore {
	objs := ctn.GetManyByType(ReflectTypeISigningKeyStore)
	var results []ISigningKeyStore
	for _, obj := range objs {
		results = append(results, obj.(ISigningKeyStore))
	}
	return results
}

// SafeGetISigningKeyStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetISigningKeyStoreFromContainer(ctn di.Container) (ISigningKeyStore, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeISigningKeyStore)
	if err != nil {
		return nil, err
	}
	return obj.(ISigningKeyStore), nil
}

// GetISigningKeyStoreDefinition returns that last definition registered that this container can provide
func GetISigningKeyStoreDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeISigningKeyStore)
	return def
}

// GetISigningKeyStoreDefinitions returns all definitions that this container can provide
func GetISigningKeyStoreDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeISigningKeyStore)
	return defs
}

// SafeGetManyISigningKeyStoreFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyISigningKeyStoreFromContainer(ctn di.Container) ([]ISigningKeyStore, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeISigningKeyStore)
	if err != nil {
		return nil, err
	}
	var results []ISigningKeyStore
	for _, obj := range objs {
		results = append(results, obj.(ISigningKeyStore))
	}
	return results, nil
}

type _logISigningKeyStoreExtra struct {
	Name  string
	Value interface{}
}

func _logAddISigningKeyStore(scopeType string, implType reflect.Type, interfaces string, extra ..._logISigningKeyStoreExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedISigningKeyStoreNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
