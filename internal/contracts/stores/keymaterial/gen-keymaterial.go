// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package keymaterial

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIKeyMaterial used when your service claims to implement IKeyMaterial
var ReflectTypeIKeyMaterial = di.GetInterfaceReflectType((*IKeyMaterial)(nil))

// AddSingletonIKeyMaterial adds a type that implements IKeyMaterial
func AddSingletonIKeyMaterial(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIKeyMaterialWithMetadata adds a type that implements IKeyMaterial
func AddSingletonIKeyMaterialWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIKeyMaterialByObj adds a prebuilt obj
func AddSingletonIKeyMaterialByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", reflect.TypeOf(obj), _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIKeyMaterialByObjWithMetadata adds a prebuilt obj
func AddSingletonIKeyMaterialByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", reflect.TypeOf(obj), _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIKeyMaterialByFunc adds a type by a custom func
func AddSingletonIKeyMaterialByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIKeyMaterialByFuncWithMetadata adds a type by a custom func
func AddSingletonIKeyMaterialByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SINGLETON", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIKeyMaterial adds a type that implements IKeyMaterial
func AddTransientIKeyMaterial(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("TRANSIENT", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIKeyMaterialWithMetadata adds a type that implements IKeyMaterial
func AddTransientIKeyMaterialWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("TRANSIENT", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIKeyMaterialByFunc adds a type by a custom func
func AddTransientIKeyMaterialByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("TRANSIENT", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIKeyMaterialByFuncWithMetadata adds a type by a custom func
func AddTransientIKeyMaterialByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("TRANSIENT", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIKeyMaterial adds a type that implements IKeyMaterial
func AddScopedIKeyMaterial(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SCOPED", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIKeyMaterialWithMetadata adds a type that implements IKeyMaterial
func AddScopedIKeyMaterialWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SCOPED", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIKeyMaterialByFunc adds a type by a custom func
func AddScopedIKeyMaterialByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SCOPED", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIKeyMaterialByFuncWithMetadata adds a type by a custom func
func AddScopedIKeyMaterialByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIKeyMaterial)
	_logAddIKeyMaterial("SCOPED", implType, _getImplementedIKeyMaterialNames(implementedTypes...),
		_logIKeyMaterialExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIKeyMaterialExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIKeyMaterial removes all IKeyMaterial from the DI
func RemoveAllIKeyMaterial(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIKeyMaterial)
}

// GetIKeyMaterialFromContainer alternative to SafeGetIKeyMaterialFromContainer but panics of object is not present
func GetIKeyMaterialFromContainer(ctn di.Container) IKeyMaterial {
	return ctn.GetByType(ReflectTypeIKeyMaterial).(IKeyMaterial)
}

// GetManyIKeyMaterialFromContainer alternative to SafeGetManyIKeyMaterialFromContainer but panics of object is not present
func GetManyIKeyMaterialFromContainer(ctn di.Container) []IKeyMaterial {
	objs := ctn.GetManyByType(ReflectTypeIKeyMaterial)
	var results []IKeyMaterial
	for _, obj := range objs {
		results = append(results, obj.(IKeyMaterial))
	}
	return results
}

// SafeGetIKeyMaterialFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIKeyMaterialFromContainer(ctn di.Container) (IKeyMaterial, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIKeyMaterial)
	if err != nil {
		return nil, err
	}
	return obj.(IKeyMaterial), nil
}

// GetIKeyMaterialDefinition returns that last definition registered that this container can provide
func GetIKeyMaterialDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIKeyMaterial)
	return def
}

// GetIKeyMaterialDefinitions returns all definitions that this container can provide
func GetIKeyMaterialDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIKeyMaterial)
	return defs
}

// SafeGetManyIKeyMaterialFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIKeyMaterialFromContainer(ctn di.Container) ([]IKeyMaterial, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIKeyMaterial)
	if err != nil {
		return nil, err
	}
	var results []IKeyMaterial
	for _, obj := range objs {
		results = append(results, obj.(IKeyMaterial))
	}
	return results, nil
}

type _logIKeyMaterialExtra struct {
	Name  string
	Value interface{}
}

func _logAddIKeyMaterial(scopeType string, implType reflect.Type, interfaces string, extra ..._logIKeyMaterialExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIKeyMaterialNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
