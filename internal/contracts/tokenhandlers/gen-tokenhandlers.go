// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package tokenhandlers

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeIClientCredentialsHandler used when your service claims to implement IClientCredentialsHandler
var ReflectTypeIClientCredentialsHandler = di.GetInterfaceReflectType((*IClientCredentialsHandler)(nil))

// AddSingletonIClientCredentialsHandler adds a type that implements IClientCredentialsHandler
func AddSingletonIClientCredentialsHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientCredentialsHandlerWithMetadata adds a type that implements IClientCredentialsHandler
func AddSingletonIClientCredentialsHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientCredentialsHandlerByObj adds a prebuilt obj
func AddSingletonIClientCredentialsHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientCredentialsHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientCredentialsHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientCredentialsHandlerByFunc adds a type by a custom func
func AddSingletonIClientCredentialsHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientCredentialsHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientCredentialsHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SINGLETON", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientCredentialsHandler adds a type that implements IClientCredentialsHandler
func AddTransientIClientCredentialsHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("TRANSIENT", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientCredentialsHandlerWithMetadata adds a type that implements IClientCredentialsHandler
func AddTransientIClientCredentialsHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("TRANSIENT", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientCredentialsHandlerByFunc adds a type by a custom func
func AddTransientIClientCredentialsHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("TRANSIENT", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientCredentialsHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientIClientCredentialsHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("TRANSIENT", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientCredentialsHandler adds a type that implements IClientCredentialsHandler
func AddScopedIClientCredentialsHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SCOPED", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientCredentialsHandlerWithMetadata adds a type that implements IClientCredentialsHandler
func AddScopedIClientCredentialsHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SCOPED", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientCredentialsHandlerByFunc adds a type by a custom func
func AddScopedIClientCredentialsHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SCOPED", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientCredentialsHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedIClientCredentialsHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsHandler)
	_logAddIClientCredentialsHandler("SCOPED", implType, _getImplementedIClientCredentialsHandlerNames(implementedTypes...),
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientCredentialsHandler removes all IClientCredentialsHandler from the DI
func RemoveAllIClientCredentialsHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientCredentialsHandler)
}

// GetIClientCredentialsHandlerFromContainer alternative to SafeGetIClientCredentialsHandlerFromContainer but panics of object is not present
func GetIClientCredentialsHandlerFromContainer(ctn di.Container) IClientCredentialsHandler {
	return ctn.GetByType(ReflectTypeIClientCredentialsHandler).(IClientCredentialsHandler)
}

// GetManyIClientCredentialsHandlerFromContainer alternative to SafeGetManyIClientCredentialsHandlerFromContainer but panics of object is not present
func GetManyIClientCredentialsHandlerFromContainer(ctn di.Container) []IClientCredentialsHandler {
	objs := ctn.GetManyByType(ReflectTypeIClientCredentialsHandler)
	var results []IClientCredentialsHandler
	for _, obj := range objs {
		results = append(results, obj.(IClientCredentialsHandler))
	}
	return results
}

// SafeGetIClientCredentialsHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientCredentialsHandlerFromContainer(ctn di.Container) (IClientCredentialsHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientCredentialsHandler)
	if err != nil {
		return nil, err
	}
	return obj.(IClientCredentialsHandler), nil
}

// GetIClientCredentialsHandlerDefinition returns that last definition registered that this container can provide
func GetIClientCredentialsHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientCredentialsHandler)
	return def
}

// GetIClientCredentialsHandlerDefinitions returns all definitions that this container can provide
func GetIClientCredentialsHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientCredentialsHandler)
	return defs
}

// SafeGetManyIClientCredentialsHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientCredentialsHandlerFromContainer(ctn di.Container) ([]IClientCredentialsHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientCredentialsHandler)
	if err != nil {
		return nil, err
	}
	var results []IClientCredentialsHandler
	for _, obj := range objs {
		results = append(results, obj.(IClientCredentialsHandler))
	}
	return results, nil
}

type _logIClientCredentialsHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientCredentialsHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientCredentialsHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientCredentialsHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeITokenExchangeHandler used when your service claims to implement ITokenExchangeHandler
var ReflectTypeITokenExchangeHandler = di.GetInterfaceReflectType((*ITokenExchangeHandler)(nil))

// AddSingletonITokenExchangeHandler adds a type that implements ITokenExchangeHandler
func AddSingletonITokenExchangeHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITokenExchangeHandlerWithMetadata adds a type that implements ITokenExchangeHandler
func AddSingletonITokenExchangeHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITokenExchangeHandlerByObj adds a prebuilt obj
func AddSingletonITokenExchangeHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITokenExchangeHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonITokenExchangeHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITokenExchangeHandlerByFunc adds a type by a custom func
func AddSingletonITokenExchangeHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITokenExchangeHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonITokenExchangeHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SINGLETON", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITokenExchangeHandler adds a type that implements ITokenExchangeHandler
func AddTransientITokenExchangeHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("TRANSIENT", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITokenExchangeHandlerWithMetadata adds a type that implements ITokenExchangeHandler
func AddTransientITokenExchangeHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("TRANSIENT", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITokenExchangeHandlerByFunc adds a type by a custom func
func AddTransientITokenExchangeHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("TRANSIENT", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITokenExchangeHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientITokenExchangeHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("TRANSIENT", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITokenExchangeHandler adds a type that implements ITokenExchangeHandler
func AddScopedITokenExchangeHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SCOPED", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITokenExchangeHandlerWithMetadata adds a type that implements ITokenExchangeHandler
func AddScopedITokenExchangeHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SCOPED", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITokenExchangeHandlerByFunc adds a type by a custom func
func AddScopedITokenExchangeHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SCOPED", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITokenExchangeHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedITokenExchangeHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeHandler)
	_logAddITokenExchangeHandler("SCOPED", implType, _getImplementedITokenExchangeHandlerNames(implementedTypes...),
		_logITokenExchangeHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITokenExchangeHandler removes all ITokenExchangeHandler from the DI
func RemoveAllITokenExchangeHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITokenExchangeHandler)
}

// GetITokenExchangeHandlerFromContainer alternative to SafeGetITokenExchangeHandlerFromContainer but panics of object is not present
func GetITokenExchangeHandlerFromContainer(ctn di.Container) ITokenExchangeHandler {
	return ctn.GetByType(ReflectTypeITokenExchangeHandler).(ITokenExchangeHandler)
}

// GetManyITokenExchangeHandlerFromContainer alternative to SafeGetManyITokenExchangeHandlerFromContainer but panics of object is not present
func GetManyITokenExchangeHandlerFromContainer(ctn di.Container) []ITokenExchangeHandler {
	objs := ctn.GetManyByType(ReflectTypeITokenExchangeHandler)
	var results []ITokenExchangeHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenExchangeHandler))
	}
	return results
}

// SafeGetITokenExchangeHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITokenExchangeHandlerFromContainer(ctn di.Container) (ITokenExchangeHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITokenExchangeHandler)
	if err != nil {
		return nil, err
	}
	return obj.(ITokenExchangeHandler), nil
}

// GetITokenExchangeHandlerDefinition returns that last definition registered that this container can provide
func GetITokenExchangeHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITokenExchangeHandler)
	return def
}

// GetITokenExchangeHandlerDefinitions returns all definitions that this container can provide
func GetITokenExchangeHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITokenExchangeHandler)
	return defs
}

// SafeGetManyITokenExchangeHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITokenExchangeHandlerFromContainer(ctn di.Container) ([]ITokenExchangeHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITokenExchangeHandler)
	if err != nil {
		return nil, err
	}
	var results []ITokenExchangeHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenExchangeHandler))
	}
	return results, nil
}

type _logITokenExchangeHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddITokenExchangeHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logITokenExchangeHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITokenExchangeHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
