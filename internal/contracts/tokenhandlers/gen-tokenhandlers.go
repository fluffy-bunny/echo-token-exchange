// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package tokenhandlers

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeITokenHandler used when your service claims to implement ITokenHandler
var ReflectTypeITokenHandler = di.GetInterfaceReflectType((*ITokenHandler)(nil))

// AddSingletonITokenHandler adds a type that implements ITokenHandler
func AddSingletonITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddSingletonITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerByObj adds a prebuilt obj
func AddSingletonITokenHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITokenHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonITokenHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerByFunc adds a type by a custom func
func AddSingletonITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITokenHandler adds a type that implements ITokenHandler
func AddTransientITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddTransientITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITokenHandlerByFunc adds a type by a custom func
func AddTransientITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITokenHandler adds a type that implements ITokenHandler
func AddScopedITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddScopedITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITokenHandlerByFunc adds a type by a custom func
func AddScopedITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITokenHandler removes all ITokenHandler from the DI
func RemoveAllITokenHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITokenHandler)
}

// GetITokenHandlerFromContainer alternative to SafeGetITokenHandlerFromContainer but panics of object is not present
func GetITokenHandlerFromContainer(ctn di.Container) ITokenHandler {
	return ctn.GetByType(ReflectTypeITokenHandler).(ITokenHandler)
}

// GetManyITokenHandlerFromContainer alternative to SafeGetManyITokenHandlerFromContainer but panics of object is not present
func GetManyITokenHandlerFromContainer(ctn di.Container) []ITokenHandler {
	objs := ctn.GetManyByType(ReflectTypeITokenHandler)
	var results []ITokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandler))
	}
	return results
}

// SafeGetITokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITokenHandlerFromContainer(ctn di.Container) (ITokenHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITokenHandler)
	if err != nil {
		return nil, err
	}
	return obj.(ITokenHandler), nil
}

// GetITokenHandlerDefinition returns that last definition registered that this container can provide
func GetITokenHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITokenHandler)
	return def
}

// GetITokenHandlerDefinitions returns all definitions that this container can provide
func GetITokenHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITokenHandler)
	return defs
}

// SafeGetManyITokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITokenHandlerFromContainer(ctn di.Container) ([]ITokenHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITokenHandler)
	if err != nil {
		return nil, err
	}
	var results []ITokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandler))
	}
	return results, nil
}

type _logITokenHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddITokenHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logITokenHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITokenHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
