// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package tokenhandlers

import (
	"reflect"
	"strings"

	di "github.com/fluffy-bunny/sarulabsdi"
	"github.com/rs/zerolog/log"
)

// ReflectTypeITokenHandler used when your service claims to implement ITokenHandler
var ReflectTypeITokenHandler = di.GetInterfaceReflectType((*ITokenHandler)(nil))

// AddSingletonITokenHandler adds a type that implements ITokenHandler
func AddSingletonITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddSingletonITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerByObj adds a prebuilt obj
func AddSingletonITokenHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITokenHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonITokenHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerByFunc adds a type by a custom func
func AddSingletonITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SINGLETON", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITokenHandler adds a type that implements ITokenHandler
func AddTransientITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddTransientITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITokenHandlerByFunc adds a type by a custom func
func AddTransientITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("TRANSIENT", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITokenHandler adds a type that implements ITokenHandler
func AddScopedITokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITokenHandlerWithMetadata adds a type that implements ITokenHandler
func AddScopedITokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITokenHandlerByFunc adds a type by a custom func
func AddScopedITokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITokenHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedITokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandler)
	_logAddITokenHandler("SCOPED", implType, _getImplementedITokenHandlerNames(implementedTypes...),
		_logITokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITokenHandler removes all ITokenHandler from the DI
func RemoveAllITokenHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITokenHandler)
}

// GetITokenHandlerFromContainer alternative to SafeGetITokenHandlerFromContainer but panics of object is not present
func GetITokenHandlerFromContainer(ctn di.Container) ITokenHandler {
	return ctn.GetByType(ReflectTypeITokenHandler).(ITokenHandler)
}

// GetManyITokenHandlerFromContainer alternative to SafeGetManyITokenHandlerFromContainer but panics of object is not present
func GetManyITokenHandlerFromContainer(ctn di.Container) []ITokenHandler {
	objs := ctn.GetManyByType(ReflectTypeITokenHandler)
	var results []ITokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandler))
	}
	return results
}

// SafeGetITokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITokenHandlerFromContainer(ctn di.Container) (ITokenHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITokenHandler)
	if err != nil {
		return nil, err
	}
	return obj.(ITokenHandler), nil
}

// GetITokenHandlerDefinition returns that last definition registered that this container can provide
func GetITokenHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITokenHandler)
	return def
}

// GetITokenHandlerDefinitions returns all definitions that this container can provide
func GetITokenHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITokenHandler)
	return defs
}

// SafeGetManyITokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITokenHandlerFromContainer(ctn di.Container) ([]ITokenHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITokenHandler)
	if err != nil {
		return nil, err
	}
	var results []ITokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandler))
	}
	return results, nil
}

type _logITokenHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddITokenHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logITokenHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITokenHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIClientCredentialsTokenHandler used when your service claims to implement IClientCredentialsTokenHandler
var ReflectTypeIClientCredentialsTokenHandler = di.GetInterfaceReflectType((*IClientCredentialsTokenHandler)(nil))

// AddSingletonIClientCredentialsTokenHandler adds a type that implements IClientCredentialsTokenHandler
func AddSingletonIClientCredentialsTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIClientCredentialsTokenHandlerWithMetadata adds a type that implements IClientCredentialsTokenHandler
func AddSingletonIClientCredentialsTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIClientCredentialsTokenHandlerByObj adds a prebuilt obj
func AddSingletonIClientCredentialsTokenHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIClientCredentialsTokenHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonIClientCredentialsTokenHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIClientCredentialsTokenHandlerByFunc adds a type by a custom func
func AddSingletonIClientCredentialsTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIClientCredentialsTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonIClientCredentialsTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SINGLETON", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIClientCredentialsTokenHandler adds a type that implements IClientCredentialsTokenHandler
func AddTransientIClientCredentialsTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("TRANSIENT", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIClientCredentialsTokenHandlerWithMetadata adds a type that implements IClientCredentialsTokenHandler
func AddTransientIClientCredentialsTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("TRANSIENT", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIClientCredentialsTokenHandlerByFunc adds a type by a custom func
func AddTransientIClientCredentialsTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("TRANSIENT", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIClientCredentialsTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientIClientCredentialsTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("TRANSIENT", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIClientCredentialsTokenHandler adds a type that implements IClientCredentialsTokenHandler
func AddScopedIClientCredentialsTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SCOPED", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIClientCredentialsTokenHandlerWithMetadata adds a type that implements IClientCredentialsTokenHandler
func AddScopedIClientCredentialsTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SCOPED", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIClientCredentialsTokenHandlerByFunc adds a type by a custom func
func AddScopedIClientCredentialsTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SCOPED", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIClientCredentialsTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedIClientCredentialsTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIClientCredentialsTokenHandler)
	_logAddIClientCredentialsTokenHandler("SCOPED", implType, _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes...),
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIClientCredentialsTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIClientCredentialsTokenHandler removes all IClientCredentialsTokenHandler from the DI
func RemoveAllIClientCredentialsTokenHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIClientCredentialsTokenHandler)
}

// GetIClientCredentialsTokenHandlerFromContainer alternative to SafeGetIClientCredentialsTokenHandlerFromContainer but panics of object is not present
func GetIClientCredentialsTokenHandlerFromContainer(ctn di.Container) IClientCredentialsTokenHandler {
	return ctn.GetByType(ReflectTypeIClientCredentialsTokenHandler).(IClientCredentialsTokenHandler)
}

// GetManyIClientCredentialsTokenHandlerFromContainer alternative to SafeGetManyIClientCredentialsTokenHandlerFromContainer but panics of object is not present
func GetManyIClientCredentialsTokenHandlerFromContainer(ctn di.Container) []IClientCredentialsTokenHandler {
	objs := ctn.GetManyByType(ReflectTypeIClientCredentialsTokenHandler)
	var results []IClientCredentialsTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(IClientCredentialsTokenHandler))
	}
	return results
}

// SafeGetIClientCredentialsTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIClientCredentialsTokenHandlerFromContainer(ctn di.Container) (IClientCredentialsTokenHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIClientCredentialsTokenHandler)
	if err != nil {
		return nil, err
	}
	return obj.(IClientCredentialsTokenHandler), nil
}

// GetIClientCredentialsTokenHandlerDefinition returns that last definition registered that this container can provide
func GetIClientCredentialsTokenHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIClientCredentialsTokenHandler)
	return def
}

// GetIClientCredentialsTokenHandlerDefinitions returns all definitions that this container can provide
func GetIClientCredentialsTokenHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIClientCredentialsTokenHandler)
	return defs
}

// SafeGetManyIClientCredentialsTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIClientCredentialsTokenHandlerFromContainer(ctn di.Container) ([]IClientCredentialsTokenHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIClientCredentialsTokenHandler)
	if err != nil {
		return nil, err
	}
	var results []IClientCredentialsTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(IClientCredentialsTokenHandler))
	}
	return results, nil
}

type _logIClientCredentialsTokenHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddIClientCredentialsTokenHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logIClientCredentialsTokenHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIClientCredentialsTokenHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIRefreshTokenHandler used when your service claims to implement IRefreshTokenHandler
var ReflectTypeIRefreshTokenHandler = di.GetInterfaceReflectType((*IRefreshTokenHandler)(nil))

// AddSingletonIRefreshTokenHandler adds a type that implements IRefreshTokenHandler
func AddSingletonIRefreshTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIRefreshTokenHandlerWithMetadata adds a type that implements IRefreshTokenHandler
func AddSingletonIRefreshTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIRefreshTokenHandlerByObj adds a prebuilt obj
func AddSingletonIRefreshTokenHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIRefreshTokenHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonIRefreshTokenHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIRefreshTokenHandlerByFunc adds a type by a custom func
func AddSingletonIRefreshTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIRefreshTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonIRefreshTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SINGLETON", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIRefreshTokenHandler adds a type that implements IRefreshTokenHandler
func AddTransientIRefreshTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("TRANSIENT", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIRefreshTokenHandlerWithMetadata adds a type that implements IRefreshTokenHandler
func AddTransientIRefreshTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("TRANSIENT", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIRefreshTokenHandlerByFunc adds a type by a custom func
func AddTransientIRefreshTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("TRANSIENT", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIRefreshTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientIRefreshTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("TRANSIENT", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIRefreshTokenHandler adds a type that implements IRefreshTokenHandler
func AddScopedIRefreshTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SCOPED", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIRefreshTokenHandlerWithMetadata adds a type that implements IRefreshTokenHandler
func AddScopedIRefreshTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SCOPED", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIRefreshTokenHandlerByFunc adds a type by a custom func
func AddScopedIRefreshTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SCOPED", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIRefreshTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedIRefreshTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIRefreshTokenHandler)
	_logAddIRefreshTokenHandler("SCOPED", implType, _getImplementedIRefreshTokenHandlerNames(implementedTypes...),
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIRefreshTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIRefreshTokenHandler removes all IRefreshTokenHandler from the DI
func RemoveAllIRefreshTokenHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIRefreshTokenHandler)
}

// GetIRefreshTokenHandlerFromContainer alternative to SafeGetIRefreshTokenHandlerFromContainer but panics of object is not present
func GetIRefreshTokenHandlerFromContainer(ctn di.Container) IRefreshTokenHandler {
	return ctn.GetByType(ReflectTypeIRefreshTokenHandler).(IRefreshTokenHandler)
}

// GetManyIRefreshTokenHandlerFromContainer alternative to SafeGetManyIRefreshTokenHandlerFromContainer but panics of object is not present
func GetManyIRefreshTokenHandlerFromContainer(ctn di.Container) []IRefreshTokenHandler {
	objs := ctn.GetManyByType(ReflectTypeIRefreshTokenHandler)
	var results []IRefreshTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(IRefreshTokenHandler))
	}
	return results
}

// SafeGetIRefreshTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIRefreshTokenHandlerFromContainer(ctn di.Container) (IRefreshTokenHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIRefreshTokenHandler)
	if err != nil {
		return nil, err
	}
	return obj.(IRefreshTokenHandler), nil
}

// GetIRefreshTokenHandlerDefinition returns that last definition registered that this container can provide
func GetIRefreshTokenHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIRefreshTokenHandler)
	return def
}

// GetIRefreshTokenHandlerDefinitions returns all definitions that this container can provide
func GetIRefreshTokenHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIRefreshTokenHandler)
	return defs
}

// SafeGetManyIRefreshTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIRefreshTokenHandlerFromContainer(ctn di.Container) ([]IRefreshTokenHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIRefreshTokenHandler)
	if err != nil {
		return nil, err
	}
	var results []IRefreshTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(IRefreshTokenHandler))
	}
	return results, nil
}

type _logIRefreshTokenHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddIRefreshTokenHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logIRefreshTokenHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIRefreshTokenHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeITokenExchangeTokenHandler used when your service claims to implement ITokenExchangeTokenHandler
var ReflectTypeITokenExchangeTokenHandler = di.GetInterfaceReflectType((*ITokenExchangeTokenHandler)(nil))

// AddSingletonITokenExchangeTokenHandler adds a type that implements ITokenExchangeTokenHandler
func AddSingletonITokenExchangeTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITokenExchangeTokenHandlerWithMetadata adds a type that implements ITokenExchangeTokenHandler
func AddSingletonITokenExchangeTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITokenExchangeTokenHandlerByObj adds a prebuilt obj
func AddSingletonITokenExchangeTokenHandlerByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITokenExchangeTokenHandlerByObjWithMetadata adds a prebuilt obj
func AddSingletonITokenExchangeTokenHandlerByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITokenExchangeTokenHandlerByFunc adds a type by a custom func
func AddSingletonITokenExchangeTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITokenExchangeTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddSingletonITokenExchangeTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SINGLETON", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITokenExchangeTokenHandler adds a type that implements ITokenExchangeTokenHandler
func AddTransientITokenExchangeTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("TRANSIENT", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITokenExchangeTokenHandlerWithMetadata adds a type that implements ITokenExchangeTokenHandler
func AddTransientITokenExchangeTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("TRANSIENT", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITokenExchangeTokenHandlerByFunc adds a type by a custom func
func AddTransientITokenExchangeTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("TRANSIENT", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITokenExchangeTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddTransientITokenExchangeTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("TRANSIENT", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITokenExchangeTokenHandler adds a type that implements ITokenExchangeTokenHandler
func AddScopedITokenExchangeTokenHandler(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SCOPED", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITokenExchangeTokenHandlerWithMetadata adds a type that implements ITokenExchangeTokenHandler
func AddScopedITokenExchangeTokenHandlerWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SCOPED", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITokenExchangeTokenHandlerByFunc adds a type by a custom func
func AddScopedITokenExchangeTokenHandlerByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SCOPED", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITokenExchangeTokenHandlerByFuncWithMetadata adds a type by a custom func
func AddScopedITokenExchangeTokenHandlerByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenExchangeTokenHandler)
	_logAddITokenExchangeTokenHandler("SCOPED", implType, _getImplementedITokenExchangeTokenHandlerNames(implementedTypes...),
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenExchangeTokenHandlerExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITokenExchangeTokenHandler removes all ITokenExchangeTokenHandler from the DI
func RemoveAllITokenExchangeTokenHandler(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITokenExchangeTokenHandler)
}

// GetITokenExchangeTokenHandlerFromContainer alternative to SafeGetITokenExchangeTokenHandlerFromContainer but panics of object is not present
func GetITokenExchangeTokenHandlerFromContainer(ctn di.Container) ITokenExchangeTokenHandler {
	return ctn.GetByType(ReflectTypeITokenExchangeTokenHandler).(ITokenExchangeTokenHandler)
}

// GetManyITokenExchangeTokenHandlerFromContainer alternative to SafeGetManyITokenExchangeTokenHandlerFromContainer but panics of object is not present
func GetManyITokenExchangeTokenHandlerFromContainer(ctn di.Container) []ITokenExchangeTokenHandler {
	objs := ctn.GetManyByType(ReflectTypeITokenExchangeTokenHandler)
	var results []ITokenExchangeTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenExchangeTokenHandler))
	}
	return results
}

// SafeGetITokenExchangeTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITokenExchangeTokenHandlerFromContainer(ctn di.Container) (ITokenExchangeTokenHandler, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITokenExchangeTokenHandler)
	if err != nil {
		return nil, err
	}
	return obj.(ITokenExchangeTokenHandler), nil
}

// GetITokenExchangeTokenHandlerDefinition returns that last definition registered that this container can provide
func GetITokenExchangeTokenHandlerDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITokenExchangeTokenHandler)
	return def
}

// GetITokenExchangeTokenHandlerDefinitions returns all definitions that this container can provide
func GetITokenExchangeTokenHandlerDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITokenExchangeTokenHandler)
	return defs
}

// SafeGetManyITokenExchangeTokenHandlerFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITokenExchangeTokenHandlerFromContainer(ctn di.Container) ([]ITokenExchangeTokenHandler, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITokenExchangeTokenHandler)
	if err != nil {
		return nil, err
	}
	var results []ITokenExchangeTokenHandler
	for _, obj := range objs {
		results = append(results, obj.(ITokenExchangeTokenHandler))
	}
	return results, nil
}

type _logITokenExchangeTokenHandlerExtra struct {
	Name  string
	Value interface{}
}

func _logAddITokenExchangeTokenHandler(scopeType string, implType reflect.Type, interfaces string, extra ..._logITokenExchangeTokenHandlerExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITokenExchangeTokenHandlerNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeITokenHandlerAccessor used when your service claims to implement ITokenHandlerAccessor
var ReflectTypeITokenHandlerAccessor = di.GetInterfaceReflectType((*ITokenHandlerAccessor)(nil))

// AddSingletonITokenHandlerAccessor adds a type that implements ITokenHandlerAccessor
func AddSingletonITokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonITokenHandlerAccessorWithMetadata adds a type that implements ITokenHandlerAccessor
func AddSingletonITokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerAccessorByObj adds a prebuilt obj
func AddSingletonITokenHandlerAccessorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonITokenHandlerAccessorByObjWithMetadata adds a prebuilt obj
func AddSingletonITokenHandlerAccessorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", reflect.TypeOf(obj), _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonITokenHandlerAccessorByFunc adds a type by a custom func
func AddSingletonITokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonITokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddSingletonITokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SINGLETON", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientITokenHandlerAccessor adds a type that implements ITokenHandlerAccessor
func AddTransientITokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("TRANSIENT", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientITokenHandlerAccessorWithMetadata adds a type that implements ITokenHandlerAccessor
func AddTransientITokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("TRANSIENT", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientITokenHandlerAccessorByFunc adds a type by a custom func
func AddTransientITokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("TRANSIENT", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientITokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddTransientITokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("TRANSIENT", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedITokenHandlerAccessor adds a type that implements ITokenHandlerAccessor
func AddScopedITokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SCOPED", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedITokenHandlerAccessorWithMetadata adds a type that implements ITokenHandlerAccessor
func AddScopedITokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SCOPED", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedITokenHandlerAccessorByFunc adds a type by a custom func
func AddScopedITokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SCOPED", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedITokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddScopedITokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeITokenHandlerAccessor)
	_logAddITokenHandlerAccessor("SCOPED", implType, _getImplementedITokenHandlerAccessorNames(implementedTypes...),
		_logITokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logITokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllITokenHandlerAccessor removes all ITokenHandlerAccessor from the DI
func RemoveAllITokenHandlerAccessor(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeITokenHandlerAccessor)
}

// GetITokenHandlerAccessorFromContainer alternative to SafeGetITokenHandlerAccessorFromContainer but panics of object is not present
func GetITokenHandlerAccessorFromContainer(ctn di.Container) ITokenHandlerAccessor {
	return ctn.GetByType(ReflectTypeITokenHandlerAccessor).(ITokenHandlerAccessor)
}

// GetManyITokenHandlerAccessorFromContainer alternative to SafeGetManyITokenHandlerAccessorFromContainer but panics of object is not present
func GetManyITokenHandlerAccessorFromContainer(ctn di.Container) []ITokenHandlerAccessor {
	objs := ctn.GetManyByType(ReflectTypeITokenHandlerAccessor)
	var results []ITokenHandlerAccessor
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandlerAccessor))
	}
	return results
}

// SafeGetITokenHandlerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetITokenHandlerAccessorFromContainer(ctn di.Container) (ITokenHandlerAccessor, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeITokenHandlerAccessor)
	if err != nil {
		return nil, err
	}
	return obj.(ITokenHandlerAccessor), nil
}

// GetITokenHandlerAccessorDefinition returns that last definition registered that this container can provide
func GetITokenHandlerAccessorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeITokenHandlerAccessor)
	return def
}

// GetITokenHandlerAccessorDefinitions returns all definitions that this container can provide
func GetITokenHandlerAccessorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeITokenHandlerAccessor)
	return defs
}

// SafeGetManyITokenHandlerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyITokenHandlerAccessorFromContainer(ctn di.Container) ([]ITokenHandlerAccessor, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeITokenHandlerAccessor)
	if err != nil {
		return nil, err
	}
	var results []ITokenHandlerAccessor
	for _, obj := range objs {
		results = append(results, obj.(ITokenHandlerAccessor))
	}
	return results, nil
}

type _logITokenHandlerAccessorExtra struct {
	Name  string
	Value interface{}
}

func _logAddITokenHandlerAccessor(scopeType string, implType reflect.Type, interfaces string, extra ..._logITokenHandlerAccessorExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedITokenHandlerAccessorNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}

// ReflectTypeIInternalTokenHandlerAccessor used when your service claims to implement IInternalTokenHandlerAccessor
var ReflectTypeIInternalTokenHandlerAccessor = di.GetInterfaceReflectType((*IInternalTokenHandlerAccessor)(nil))

// AddSingletonIInternalTokenHandlerAccessor adds a type that implements IInternalTokenHandlerAccessor
func AddSingletonIInternalTokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddSingleton(builder, implType, implementedTypes...)
}

// AddSingletonIInternalTokenHandlerAccessorWithMetadata adds a type that implements IInternalTokenHandlerAccessor
func AddSingletonIInternalTokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddSingletonWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddSingletonIInternalTokenHandlerAccessorByObj adds a prebuilt obj
func AddSingletonIInternalTokenHandlerAccessorByObj(builder *di.Builder, obj interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", reflect.TypeOf(obj), _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "obj",
		})
	di.AddSingletonWithImplementedTypesByObj(builder, obj, implementedTypes...)
}

// AddSingletonIInternalTokenHandlerAccessorByObjWithMetadata adds a prebuilt obj
func AddSingletonIInternalTokenHandlerAccessorByObjWithMetadata(builder *di.Builder, obj interface{}, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", reflect.TypeOf(obj), _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "obj",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByObjWithMetadata(builder, obj, metaData, implementedTypes...)
}

// AddSingletonIInternalTokenHandlerAccessorByFunc adds a type by a custom func
func AddSingletonIInternalTokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddSingletonWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddSingletonIInternalTokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddSingletonIInternalTokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SINGLETON", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddSingletonWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddTransientIInternalTokenHandlerAccessor adds a type that implements IInternalTokenHandlerAccessor
func AddTransientIInternalTokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("TRANSIENT", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})

	di.AddTransientWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddTransientIInternalTokenHandlerAccessorWithMetadata adds a type that implements IInternalTokenHandlerAccessor
func AddTransientIInternalTokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("TRANSIENT", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddTransientIInternalTokenHandlerAccessorByFunc adds a type by a custom func
func AddTransientIInternalTokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("TRANSIENT", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})

	di.AddTransientWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddTransientIInternalTokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddTransientIInternalTokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("TRANSIENT", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddTransientWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// AddScopedIInternalTokenHandlerAccessor adds a type that implements IInternalTokenHandlerAccessor
func AddScopedIInternalTokenHandlerAccessor(builder *di.Builder, implType reflect.Type, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SCOPED", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		})
	di.AddScopedWithImplementedTypes(builder, implType, implementedTypes...)
}

// AddScopedIInternalTokenHandlerAccessorWithMetadata adds a type that implements IInternalTokenHandlerAccessor
func AddScopedIInternalTokenHandlerAccessorWithMetadata(builder *di.Builder, implType reflect.Type, metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SCOPED", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "type",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})
	di.AddScopedWithImplementedTypesWithMetadata(builder, implType, metaData, implementedTypes...)
}

// AddScopedIInternalTokenHandlerAccessorByFunc adds a type by a custom func
func AddScopedIInternalTokenHandlerAccessorByFunc(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SCOPED", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		})
	di.AddScopedWithImplementedTypesByFunc(builder, implType, build, implementedTypes...)
}

// AddScopedIInternalTokenHandlerAccessorByFuncWithMetadata adds a type by a custom func
func AddScopedIInternalTokenHandlerAccessorByFuncWithMetadata(builder *di.Builder, implType reflect.Type, build func(ctn di.Container) (interface{}, error), metaData map[string]interface{}, implementedTypes ...reflect.Type) {
	implementedTypes = append(implementedTypes, ReflectTypeIInternalTokenHandlerAccessor)
	_logAddIInternalTokenHandlerAccessor("SCOPED", implType, _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes...),
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-BY",
			Value: "func",
		},
		_logIInternalTokenHandlerAccessorExtra{
			Name:  "DI-M",
			Value: metaData,
		})

	di.AddScopedWithImplementedTypesByFuncWithMetadata(builder, implType, build, metaData, implementedTypes...)
}

// RemoveAllIInternalTokenHandlerAccessor removes all IInternalTokenHandlerAccessor from the DI
func RemoveAllIInternalTokenHandlerAccessor(builder *di.Builder) {
	builder.RemoveAllByType(ReflectTypeIInternalTokenHandlerAccessor)
}

// GetIInternalTokenHandlerAccessorFromContainer alternative to SafeGetIInternalTokenHandlerAccessorFromContainer but panics of object is not present
func GetIInternalTokenHandlerAccessorFromContainer(ctn di.Container) IInternalTokenHandlerAccessor {
	return ctn.GetByType(ReflectTypeIInternalTokenHandlerAccessor).(IInternalTokenHandlerAccessor)
}

// GetManyIInternalTokenHandlerAccessorFromContainer alternative to SafeGetManyIInternalTokenHandlerAccessorFromContainer but panics of object is not present
func GetManyIInternalTokenHandlerAccessorFromContainer(ctn di.Container) []IInternalTokenHandlerAccessor {
	objs := ctn.GetManyByType(ReflectTypeIInternalTokenHandlerAccessor)
	var results []IInternalTokenHandlerAccessor
	for _, obj := range objs {
		results = append(results, obj.(IInternalTokenHandlerAccessor))
	}
	return results
}

// SafeGetIInternalTokenHandlerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetIInternalTokenHandlerAccessorFromContainer(ctn di.Container) (IInternalTokenHandlerAccessor, error) {
	obj, err := ctn.SafeGetByType(ReflectTypeIInternalTokenHandlerAccessor)
	if err != nil {
		return nil, err
	}
	return obj.(IInternalTokenHandlerAccessor), nil
}

// GetIInternalTokenHandlerAccessorDefinition returns that last definition registered that this container can provide
func GetIInternalTokenHandlerAccessorDefinition(ctn di.Container) *di.Def {
	def := ctn.GetDefinitionByType(ReflectTypeIInternalTokenHandlerAccessor)
	return def
}

// GetIInternalTokenHandlerAccessorDefinitions returns all definitions that this container can provide
func GetIInternalTokenHandlerAccessorDefinitions(ctn di.Container) []*di.Def {
	defs := ctn.GetDefinitionsByType(ReflectTypeIInternalTokenHandlerAccessor)
	return defs
}

// SafeGetManyIInternalTokenHandlerAccessorFromContainer trys to get the object by type, will not panic, returns nil and error
func SafeGetManyIInternalTokenHandlerAccessorFromContainer(ctn di.Container) ([]IInternalTokenHandlerAccessor, error) {
	objs, err := ctn.SafeGetManyByType(ReflectTypeIInternalTokenHandlerAccessor)
	if err != nil {
		return nil, err
	}
	var results []IInternalTokenHandlerAccessor
	for _, obj := range objs {
		results = append(results, obj.(IInternalTokenHandlerAccessor))
	}
	return results, nil
}

type _logIInternalTokenHandlerAccessorExtra struct {
	Name  string
	Value interface{}
}

func _logAddIInternalTokenHandlerAccessor(scopeType string, implType reflect.Type, interfaces string, extra ..._logIInternalTokenHandlerAccessorExtra) {
	infoEvent := log.Info().
		Str("DI", scopeType).
		Str("DI-I", interfaces).
		Str("DI-B", implType.Elem().String())

	for _, extra := range extra {
		infoEvent = infoEvent.Interface(extra.Name, extra.Value)
	}

	infoEvent.Send()

}
func _getImplementedIInternalTokenHandlerAccessorNames(implementedTypes ...reflect.Type) string {
	builder := strings.Builder{}
	for idx, implementedType := range implementedTypes {
		builder.WriteString(implementedType.Name())
		if idx < len(implementedTypes)-1 {
			builder.WriteString(", ")
		}
	}
	return builder.String()
}
