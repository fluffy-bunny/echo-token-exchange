// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/go-oauth2/oauth2 (interfaces: ITokenStore,IClientStore)

// Package oauth2 is a generated GoMock package.
package oauth2

import (
	context "context"
	reflect "reflect"

	oauth2 "github.com/go-oauth2/oauth2/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockITokenStore is a mock of ITokenStore interface.
type MockITokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockITokenStoreMockRecorder
}

// MockITokenStoreMockRecorder is the mock recorder for MockITokenStore.
type MockITokenStoreMockRecorder struct {
	mock *MockITokenStore
}

// NewMockITokenStore creates a new mock instance.
func NewMockITokenStore(ctrl *gomock.Controller) *MockITokenStore {
	mock := &MockITokenStore{ctrl: ctrl}
	mock.recorder = &MockITokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenStore) EXPECT() *MockITokenStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITokenStore) Create(arg0 context.Context, arg1 oauth2.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockITokenStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITokenStore)(nil).Create), arg0, arg1)
}

// GetByAccess mocks base method.
func (m *MockITokenStore) GetByAccess(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccess", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccess indicates an expected call of GetByAccess.
func (mr *MockITokenStoreMockRecorder) GetByAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccess", reflect.TypeOf((*MockITokenStore)(nil).GetByAccess), arg0, arg1)
}

// GetByCode mocks base method.
func (m *MockITokenStore) GetByCode(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockITokenStoreMockRecorder) GetByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockITokenStore)(nil).GetByCode), arg0, arg1)
}

// GetByRefresh mocks base method.
func (m *MockITokenStore) GetByRefresh(arg0 context.Context, arg1 string) (oauth2.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefresh", arg0, arg1)
	ret0, _ := ret[0].(oauth2.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefresh indicates an expected call of GetByRefresh.
func (mr *MockITokenStoreMockRecorder) GetByRefresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefresh", reflect.TypeOf((*MockITokenStore)(nil).GetByRefresh), arg0, arg1)
}

// RemoveByAccess mocks base method.
func (m *MockITokenStore) RemoveByAccess(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByAccess", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByAccess indicates an expected call of RemoveByAccess.
func (mr *MockITokenStoreMockRecorder) RemoveByAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByAccess", reflect.TypeOf((*MockITokenStore)(nil).RemoveByAccess), arg0, arg1)
}

// RemoveByCode mocks base method.
func (m *MockITokenStore) RemoveByCode(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByCode indicates an expected call of RemoveByCode.
func (mr *MockITokenStoreMockRecorder) RemoveByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByCode", reflect.TypeOf((*MockITokenStore)(nil).RemoveByCode), arg0, arg1)
}

// RemoveByRefresh mocks base method.
func (m *MockITokenStore) RemoveByRefresh(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByRefresh", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByRefresh indicates an expected call of RemoveByRefresh.
func (mr *MockITokenStoreMockRecorder) RemoveByRefresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByRefresh", reflect.TypeOf((*MockITokenStore)(nil).RemoveByRefresh), arg0, arg1)
}

// MockIClientStore is a mock of IClientStore interface.
type MockIClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockIClientStoreMockRecorder
}

// MockIClientStoreMockRecorder is the mock recorder for MockIClientStore.
type MockIClientStoreMockRecorder struct {
	mock *MockIClientStore
}

// NewMockIClientStore creates a new mock instance.
func NewMockIClientStore(ctrl *gomock.Controller) *MockIClientStore {
	mock := &MockIClientStore{ctrl: ctrl}
	mock.recorder = &MockIClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientStore) EXPECT() *MockIClientStoreMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockIClientStore) GetByID(arg0 context.Context, arg1 string) (oauth2.ClientInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(oauth2.ClientInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIClientStoreMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIClientStore)(nil).GetByID), arg0, arg1)
}
