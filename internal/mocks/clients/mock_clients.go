// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/clients (interfaces: IClientStore)

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	models "echo-starter/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIClientStore is a mock of IClientStore interface.
type MockIClientStore struct {
	ctrl     *gomock.Controller
	recorder *MockIClientStoreMockRecorder
}

// MockIClientStoreMockRecorder is the mock recorder for MockIClientStore.
type MockIClientStoreMockRecorder struct {
	mock *MockIClientStore
}

// NewMockIClientStore creates a new mock instance.
func NewMockIClientStore(ctrl *gomock.Controller) *MockIClientStore {
	mock := &MockIClientStore{ctrl: ctrl}
	mock.recorder = &MockIClientStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientStore) EXPECT() *MockIClientStoreMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockIClientStore) GetClient(arg0 context.Context, arg1 string) (*models.Client, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClient indicates an expected call of GetClient.
func (mr *MockIClientStoreMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIClientStore)(nil).GetClient), arg0, arg1)
}
