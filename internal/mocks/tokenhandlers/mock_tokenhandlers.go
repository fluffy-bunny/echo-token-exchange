// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/tokenhandlers (interfaces: ITokenHandler)

// Package tokenhandlers is a generated GoMock package.
package tokenhandlers

import (
	context "context"
	tokenhandlers "echo-starter/internal/contracts/tokenhandlers"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITokenHandler is a mock of ITokenHandler interface.
type MockITokenHandler struct {
	ctrl     *gomock.Controller
	recorder *MockITokenHandlerMockRecorder
}

// MockITokenHandlerMockRecorder is the mock recorder for MockITokenHandler.
type MockITokenHandlerMockRecorder struct {
	mock *MockITokenHandler
}

// NewMockITokenHandler creates a new mock instance.
func NewMockITokenHandler(ctrl *gomock.Controller) *MockITokenHandler {
	mock := &MockITokenHandler{ctrl: ctrl}
	mock.recorder = &MockITokenHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenHandler) EXPECT() *MockITokenHandlerMockRecorder {
	return m.recorder
}

// GetGrantType mocks base method.
func (m *MockITokenHandler) GetGrantType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGrantType indicates an expected call of GetGrantType.
func (mr *MockITokenHandlerMockRecorder) GetGrantType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantType", reflect.TypeOf((*MockITokenHandler)(nil).GetGrantType))
}

// ProcessTokenRequest mocks base method.
func (m *MockITokenHandler) ProcessTokenRequest(arg0 context.Context, arg1 interface{}) (tokenhandlers.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTokenRequest", arg0, arg1)
	ret0, _ := ret[0].(tokenhandlers.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTokenRequest indicates an expected call of ProcessTokenRequest.
func (mr *MockITokenHandlerMockRecorder) ProcessTokenRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTokenRequest", reflect.TypeOf((*MockITokenHandler)(nil).ProcessTokenRequest), arg0, arg1)
}

// ValidationTokenRequest mocks base method.
func (m *MockITokenHandler) ValidationTokenRequest(arg0 *http.Request) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationTokenRequest", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidationTokenRequest indicates an expected call of ValidationTokenRequest.
func (mr *MockITokenHandlerMockRecorder) ValidationTokenRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationTokenRequest", reflect.TypeOf((*MockITokenHandler)(nil).ValidationTokenRequest), arg0)
}
