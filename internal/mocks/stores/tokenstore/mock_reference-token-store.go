// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/stores/tokenstore (interfaces: IReferenceTokenStore,IInternalReferenceTokenStore,ITokenStore)

// Package tokenstore is a generated GoMock package.
package tokenstore

import (
	context "context"
	tokenstore "echo-starter/internal/contracts/stores/tokenstore"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIReferenceTokenStore is a mock of IReferenceTokenStore interface.
type MockIReferenceTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockIReferenceTokenStoreMockRecorder
}

// MockIReferenceTokenStoreMockRecorder is the mock recorder for MockIReferenceTokenStore.
type MockIReferenceTokenStoreMockRecorder struct {
	mock *MockIReferenceTokenStore
}

// NewMockIReferenceTokenStore creates a new mock instance.
func NewMockIReferenceTokenStore(ctrl *gomock.Controller) *MockIReferenceTokenStore {
	mock := &MockIReferenceTokenStore{ctrl: ctrl}
	mock.recorder = &MockIReferenceTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReferenceTokenStore) EXPECT() *MockIReferenceTokenStoreMockRecorder {
	return m.recorder
}

// GetReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) GetReferenceToken(arg0 context.Context, arg1 string) (*tokenstore.ReferenceTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(*tokenstore.ReferenceTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceToken indicates an expected call of GetReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) GetReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).GetReferenceToken), arg0, arg1)
}

// RemoveReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceToken indicates an expected call of RemoveReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceToken), arg0, arg1)
}

// RemoveReferenceTokenByClientID mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenByClientID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientID indicates an expected call of RemoveReferenceTokenByClientID.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientID", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenByClientID), arg0, arg1)
}

// RemoveReferenceTokenByClientIdAndSubject mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenByClientIdAndSubject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientIdAndSubject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientIdAndSubject indicates an expected call of RemoveReferenceTokenByClientIdAndSubject.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientIdAndSubject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientIdAndSubject", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenByClientIdAndSubject), arg0, arg1, arg2)
}

// RemoveReferenceTokenBySubject mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenBySubject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenBySubject indicates an expected call of RemoveReferenceTokenBySubject.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenBySubject", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenBySubject), arg0, arg1)
}

// StoreReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) StoreReferenceToken(arg0 context.Context, arg1 *tokenstore.ReferenceTokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReferenceToken indicates an expected call of StoreReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) StoreReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).StoreReferenceToken), arg0, arg1)
}

// UpdateReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) UpdateReferenceToken(arg0 context.Context, arg1 string, arg2 *tokenstore.ReferenceTokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferenceToken indicates an expected call of UpdateReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) UpdateReferenceToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).UpdateReferenceToken), arg0, arg1, arg2)
}

// MockIInternalReferenceTokenStore is a mock of IInternalReferenceTokenStore interface.
type MockIInternalReferenceTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockIInternalReferenceTokenStoreMockRecorder
}

// MockIInternalReferenceTokenStoreMockRecorder is the mock recorder for MockIInternalReferenceTokenStore.
type MockIInternalReferenceTokenStoreMockRecorder struct {
	mock *MockIInternalReferenceTokenStore
}

// NewMockIInternalReferenceTokenStore creates a new mock instance.
func NewMockIInternalReferenceTokenStore(ctrl *gomock.Controller) *MockIInternalReferenceTokenStore {
	mock := &MockIInternalReferenceTokenStore{ctrl: ctrl}
	mock.recorder = &MockIInternalReferenceTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInternalReferenceTokenStore) EXPECT() *MockIInternalReferenceTokenStoreMockRecorder {
	return m.recorder
}

// GetReferenceToken mocks base method.
func (m *MockIInternalReferenceTokenStore) GetReferenceToken(arg0 context.Context, arg1 string) (*tokenstore.ReferenceTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(*tokenstore.ReferenceTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceToken indicates an expected call of GetReferenceToken.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) GetReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceToken", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).GetReferenceToken), arg0, arg1)
}

// RemoveExpired mocks base method.
func (m *MockIInternalReferenceTokenStore) RemoveExpired(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveExpired", arg0)
}

// RemoveExpired indicates an expected call of RemoveExpired.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) RemoveExpired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExpired", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).RemoveExpired), arg0)
}

// RemoveReferenceToken mocks base method.
func (m *MockIInternalReferenceTokenStore) RemoveReferenceToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceToken indicates an expected call of RemoveReferenceToken.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) RemoveReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceToken", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).RemoveReferenceToken), arg0, arg1)
}

// RemoveReferenceTokenByClientID mocks base method.
func (m *MockIInternalReferenceTokenStore) RemoveReferenceTokenByClientID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientID indicates an expected call of RemoveReferenceTokenByClientID.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientID", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).RemoveReferenceTokenByClientID), arg0, arg1)
}

// RemoveReferenceTokenByClientIdAndSubject mocks base method.
func (m *MockIInternalReferenceTokenStore) RemoveReferenceTokenByClientIdAndSubject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientIdAndSubject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientIdAndSubject indicates an expected call of RemoveReferenceTokenByClientIdAndSubject.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientIdAndSubject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientIdAndSubject", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).RemoveReferenceTokenByClientIdAndSubject), arg0, arg1, arg2)
}

// RemoveReferenceTokenBySubject mocks base method.
func (m *MockIInternalReferenceTokenStore) RemoveReferenceTokenBySubject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenBySubject indicates an expected call of RemoveReferenceTokenBySubject.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) RemoveReferenceTokenBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenBySubject", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).RemoveReferenceTokenBySubject), arg0, arg1)
}

// StoreReferenceToken mocks base method.
func (m *MockIInternalReferenceTokenStore) StoreReferenceToken(arg0 context.Context, arg1 *tokenstore.ReferenceTokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReferenceToken indicates an expected call of StoreReferenceToken.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) StoreReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReferenceToken", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).StoreReferenceToken), arg0, arg1)
}

// UpdateReferenceToken mocks base method.
func (m *MockIInternalReferenceTokenStore) UpdateReferenceToken(arg0 context.Context, arg1 string, arg2 *tokenstore.ReferenceTokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferenceToken indicates an expected call of UpdateReferenceToken.
func (mr *MockIInternalReferenceTokenStoreMockRecorder) UpdateReferenceToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceToken", reflect.TypeOf((*MockIInternalReferenceTokenStore)(nil).UpdateReferenceToken), arg0, arg1, arg2)
}

// MockITokenStore is a mock of ITokenStore interface.
type MockITokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockITokenStoreMockRecorder
}

// MockITokenStoreMockRecorder is the mock recorder for MockITokenStore.
type MockITokenStoreMockRecorder struct {
	mock *MockITokenStore
}

// NewMockITokenStore creates a new mock instance.
func NewMockITokenStore(ctrl *gomock.Controller) *MockITokenStore {
	mock := &MockITokenStore{ctrl: ctrl}
	mock.recorder = &MockITokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenStore) EXPECT() *MockITokenStoreMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockITokenStore) GetToken(arg0 context.Context, arg1 string) (*tokenstore.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0, arg1)
	ret0, _ := ret[0].(*tokenstore.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockITokenStoreMockRecorder) GetToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockITokenStore)(nil).GetToken), arg0, arg1)
}

// RemoveToken mocks base method.
func (m *MockITokenStore) RemoveToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockITokenStoreMockRecorder) RemoveToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockITokenStore)(nil).RemoveToken), arg0, arg1)
}

// RemoveTokenByClientID mocks base method.
func (m *MockITokenStore) RemoveTokenByClientID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTokenByClientID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTokenByClientID indicates an expected call of RemoveTokenByClientID.
func (mr *MockITokenStoreMockRecorder) RemoveTokenByClientID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTokenByClientID", reflect.TypeOf((*MockITokenStore)(nil).RemoveTokenByClientID), arg0, arg1)
}

// RemoveTokenByClientIdAndSubject mocks base method.
func (m *MockITokenStore) RemoveTokenByClientIdAndSubject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTokenByClientIdAndSubject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTokenByClientIdAndSubject indicates an expected call of RemoveTokenByClientIdAndSubject.
func (mr *MockITokenStoreMockRecorder) RemoveTokenByClientIdAndSubject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTokenByClientIdAndSubject", reflect.TypeOf((*MockITokenStore)(nil).RemoveTokenByClientIdAndSubject), arg0, arg1, arg2)
}

// RemoveTokenBySubject mocks base method.
func (m *MockITokenStore) RemoveTokenBySubject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTokenBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTokenBySubject indicates an expected call of RemoveTokenBySubject.
func (mr *MockITokenStoreMockRecorder) RemoveTokenBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTokenBySubject", reflect.TypeOf((*MockITokenStore)(nil).RemoveTokenBySubject), arg0, arg1)
}

// StoreToken mocks base method.
func (m *MockITokenStore) StoreToken(arg0 context.Context, arg1 *tokenstore.TokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreToken indicates an expected call of StoreToken.
func (mr *MockITokenStoreMockRecorder) StoreToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreToken", reflect.TypeOf((*MockITokenStore)(nil).StoreToken), arg0, arg1)
}

// UpdateToken mocks base method.
func (m *MockITokenStore) UpdateToken(arg0 context.Context, arg1 string, arg2 *tokenstore.TokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockITokenStoreMockRecorder) UpdateToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockITokenStore)(nil).UpdateToken), arg0, arg1, arg2)
}
