// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/stores/referencetoken (interfaces: IReferenceTokenStore)

// Package referencetoken is a generated GoMock package.
package referencetoken

import (
	context "context"
	referencetoken "echo-starter/internal/contracts/stores/referencetoken"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIReferenceTokenStore is a mock of IReferenceTokenStore interface.
type MockIReferenceTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockIReferenceTokenStoreMockRecorder
}

// MockIReferenceTokenStoreMockRecorder is the mock recorder for MockIReferenceTokenStore.
type MockIReferenceTokenStoreMockRecorder struct {
	mock *MockIReferenceTokenStore
}

// NewMockIReferenceTokenStore creates a new mock instance.
func NewMockIReferenceTokenStore(ctrl *gomock.Controller) *MockIReferenceTokenStore {
	mock := &MockIReferenceTokenStore{ctrl: ctrl}
	mock.recorder = &MockIReferenceTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReferenceTokenStore) EXPECT() *MockIReferenceTokenStoreMockRecorder {
	return m.recorder
}

// GetReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) GetReferenceToken(arg0 context.Context, arg1 string) (*referencetoken.ReferenceTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(*referencetoken.ReferenceTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceToken indicates an expected call of GetReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) GetReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).GetReferenceToken), arg0, arg1)
}

// RemoveReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceToken indicates an expected call of RemoveReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceToken), arg0, arg1)
}

// RemoveReferenceTokenByClientID mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenByClientID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientID indicates an expected call of RemoveReferenceTokenByClientID.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientID", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenByClientID), arg0, arg1)
}

// RemoveReferenceTokenByClientIdAndSubject mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenByClientIdAndSubject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenByClientIdAndSubject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenByClientIdAndSubject indicates an expected call of RemoveReferenceTokenByClientIdAndSubject.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenByClientIdAndSubject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenByClientIdAndSubject", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenByClientIdAndSubject), arg0, arg1, arg2)
}

// RemoveReferenceTokenBySubject mocks base method.
func (m *MockIReferenceTokenStore) RemoveReferenceTokenBySubject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReferenceTokenBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReferenceTokenBySubject indicates an expected call of RemoveReferenceTokenBySubject.
func (mr *MockIReferenceTokenStoreMockRecorder) RemoveReferenceTokenBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReferenceTokenBySubject", reflect.TypeOf((*MockIReferenceTokenStore)(nil).RemoveReferenceTokenBySubject), arg0, arg1)
}

// StoreReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) StoreReferenceToken(arg0 context.Context, arg1 *referencetoken.ReferenceTokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReferenceToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReferenceToken indicates an expected call of StoreReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) StoreReferenceToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).StoreReferenceToken), arg0, arg1)
}

// UpdateReferenceToken mocks base method.
func (m *MockIReferenceTokenStore) UpdateReferenceToken(arg0 context.Context, arg1 string, arg2 *referencetoken.ReferenceTokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferenceToken indicates an expected call of UpdateReferenceToken.
func (mr *MockIReferenceTokenStoreMockRecorder) UpdateReferenceToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceToken", reflect.TypeOf((*MockIReferenceTokenStore)(nil).UpdateReferenceToken), arg0, arg1, arg2)
}
