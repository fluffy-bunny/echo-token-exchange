// Code generated by MockGen. DO NOT EDIT.
// Source: echo-starter/internal/contracts/stores/refreshtoken (interfaces: IRefreshTokenStore)

// Package refreshtoken is a generated GoMock package.
package refreshtoken

import (
	context "context"
	refreshtoken "echo-starter/internal/contracts/stores/refreshtoken"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRefreshTokenStore is a mock of IRefreshTokenStore interface.
type MockIRefreshTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockIRefreshTokenStoreMockRecorder
}

// MockIRefreshTokenStoreMockRecorder is the mock recorder for MockIRefreshTokenStore.
type MockIRefreshTokenStoreMockRecorder struct {
	mock *MockIRefreshTokenStore
}

// NewMockIRefreshTokenStore creates a new mock instance.
func NewMockIRefreshTokenStore(ctrl *gomock.Controller) *MockIRefreshTokenStore {
	mock := &MockIRefreshTokenStore{ctrl: ctrl}
	mock.recorder = &MockIRefreshTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRefreshTokenStore) EXPECT() *MockIRefreshTokenStoreMockRecorder {
	return m.recorder
}

// GetRefreshToken mocks base method.
func (m *MockIRefreshTokenStore) GetRefreshToken(arg0 context.Context, arg1 string) (*refreshtoken.RefreshTokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*refreshtoken.RefreshTokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockIRefreshTokenStoreMockRecorder) GetRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockIRefreshTokenStore)(nil).GetRefreshToken), arg0, arg1)
}

// RemoveRefreshToken mocks base method.
func (m *MockIRefreshTokenStore) RemoveRefreshToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRefreshToken indicates an expected call of RemoveRefreshToken.
func (mr *MockIRefreshTokenStoreMockRecorder) RemoveRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRefreshToken", reflect.TypeOf((*MockIRefreshTokenStore)(nil).RemoveRefreshToken), arg0, arg1)
}

// RemoveRefreshTokenByClientID mocks base method.
func (m *MockIRefreshTokenStore) RemoveRefreshTokenByClientID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRefreshTokenByClientID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRefreshTokenByClientID indicates an expected call of RemoveRefreshTokenByClientID.
func (mr *MockIRefreshTokenStoreMockRecorder) RemoveRefreshTokenByClientID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRefreshTokenByClientID", reflect.TypeOf((*MockIRefreshTokenStore)(nil).RemoveRefreshTokenByClientID), arg0, arg1)
}

// RemoveRefreshTokenByClientIdAndSubject mocks base method.
func (m *MockIRefreshTokenStore) RemoveRefreshTokenByClientIdAndSubject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRefreshTokenByClientIdAndSubject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRefreshTokenByClientIdAndSubject indicates an expected call of RemoveRefreshTokenByClientIdAndSubject.
func (mr *MockIRefreshTokenStoreMockRecorder) RemoveRefreshTokenByClientIdAndSubject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRefreshTokenByClientIdAndSubject", reflect.TypeOf((*MockIRefreshTokenStore)(nil).RemoveRefreshTokenByClientIdAndSubject), arg0, arg1, arg2)
}

// RemoveRefreshTokenBySubject mocks base method.
func (m *MockIRefreshTokenStore) RemoveRefreshTokenBySubject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRefreshTokenBySubject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRefreshTokenBySubject indicates an expected call of RemoveRefreshTokenBySubject.
func (mr *MockIRefreshTokenStoreMockRecorder) RemoveRefreshTokenBySubject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRefreshTokenBySubject", reflect.TypeOf((*MockIRefreshTokenStore)(nil).RemoveRefreshTokenBySubject), arg0, arg1)
}

// StoreRefreshToken mocks base method.
func (m *MockIRefreshTokenStore) StoreRefreshToken(arg0 context.Context, arg1 *refreshtoken.RefreshTokenInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockIRefreshTokenStoreMockRecorder) StoreRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockIRefreshTokenStore)(nil).StoreRefreshToken), arg0, arg1)
}

// UpdateRefeshToken mocks base method.
func (m *MockIRefreshTokenStore) UpdateRefeshToken(arg0 context.Context, arg1 string, arg2 *refreshtoken.RefreshTokenInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRefeshToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRefeshToken indicates an expected call of UpdateRefeshToken.
func (mr *MockIRefreshTokenStoreMockRecorder) UpdateRefeshToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRefeshToken", reflect.TypeOf((*MockIRefreshTokenStore)(nil).UpdateRefeshToken), arg0, arg1, arg2)
}
